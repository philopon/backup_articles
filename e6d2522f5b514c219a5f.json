{"rendered_body": "<p>Haskell\u3067\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u3044\u3066\u3044\u308b\u3068\u304d\u3001\u3059\u3053\u3057\u898f\u6a21\u304c\u5927\u304d\u304f\u306a\u308a\u306f\u3058\u3081\u308b\u3068\u3001\u8a2d\u5b9a\u3092\u5f15\u6570\u3067\u5f15\u304d\u307e\u308f\u3059\u306e\u304c\u3064\u3089\u304f\u306a\u3063\u3066\u304f\u308b\u4e8b\u304c\u591a\u3005\u3042\u308b\u3068\u601d\u3044\u307e\u3059\u3002</p>\n\n<p>\u305d\u3093\u306a\u3068\u304d\u306b\u4fbf\u5229\u306a\u65b9\u6cd5\u3068\u3057\u3066\u3001ghc\u62e1\u5f35\u306eImplicitParams\u3084reflection\u30d1\u30c3\u30b1\u30fc\u30b8\u306eGiven\u304c\u3042\u308a\u307e\u3059\u3002</p>\n\n<p>\u3068\u308a\u3042\u3048\u305a\u3001\u3079\u304d\u4e57\u95a2\u6570\u306e\u7b2c\u4e00\u3001\u7b2c\u4e8c\u5f15\u6570\u3092\u5f15\u304d\u307e\u308f\u3057\u305f\u3044\u8a2d\u5b9a\u3068\u3057\u3066\u4f7f\u3063\u3066\u307f\u307e\u3057\u3087\u3046\u3002</p>\n\n<p>\u307e\u305a\u306fImplicitParams\u3067\u3059\u3002</p>\n\n<div class=\"code-frame\" data-lang=\"hs\">\n<div class=\"code-lang\"><span class=\"bold\">ImplicitParams.hs</span></div>\n<div class=\"highlight\"><pre><span class=\"cp\">{-# LANGUAGE ImplicitParams #-}</span>\n<span class=\"cp\">{-# LANGUAGE NoMonomorphismRestriction #-}</span>\n\n<span class=\"c1\">-- \u578b\u6ce8\u91c8\u306f\u4e0d\u8981\u3002\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u63a8\u8ad6\u3055\u308c\u308b\u3002</span>\n<span class=\"c1\">-- power :: (?int::b, ?dbl::a, Num a, Integral b) =&gt; a</span>\n<span class=\"n\">power</span> <span class=\"o\">=</span> <span class=\"o\">?</span><span class=\"n\">dbl</span> <span class=\"o\">^</span> <span class=\"o\">?</span><span class=\"n\">int</span>\n\n<span class=\"n\">main</span> <span class=\"o\">::</span> <span class=\"kt\">IO</span> <span class=\"nb\">()</span>\n<span class=\"n\">main</span> <span class=\"o\">=</span> <span class=\"kr\">do</span>\n    <span class=\"kr\">let</span> <span class=\"o\">?</span><span class=\"n\">dbl</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\n        <span class=\"o\">?</span><span class=\"n\">int</span> <span class=\"o\">=</span> <span class=\"mi\">4</span>\n    <span class=\"n\">print</span> <span class=\"n\">power</span>\n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"bash\">\n<div class=\"code-lang\"><span class=\"bold\">\u5b9f\u884c\u7d50\u679c</span></div>\n<div class=\"highlight\"><pre><span class=\"nv\">$ </span>runhaskell ImplicitParams.hs\n16\n</pre></div>\n</div>\n\n<p>\u3064\u3065\u3044\u3066\u3001Given\u3092\u4f7f\u3046\u5834\u5408\u3067\u3059\u3002</p>\n\n<div class=\"code-frame\" data-lang=\"hs\">\n<div class=\"code-lang\"><span class=\"bold\">Given.hs</span></div>\n<div class=\"highlight\"><pre><span class=\"cp\">{-# LANGUAGE FlexibleContexts #-}</span>\n\n<span class=\"kr\">import</span> <span class=\"nn\">Data.Reflection</span>\n\n<span class=\"c1\">-- \u578b\u6ce8\u91c8\u5fc5\u9808\u3002\u5b9f\u969b\u306b\u4f7f\u7528\u3059\u308b\u3068\u304d\u306fnewtype\u3067wrap\u3059\u308b\u65b9\u304c\u826f\u3044\u304b\u3082\u3002</span>\n<span class=\"n\">power</span> <span class=\"o\">::</span> <span class=\"p\">(</span><span class=\"kt\">Given</span> <span class=\"kt\">Double</span><span class=\"p\">,</span> <span class=\"kt\">Given</span> <span class=\"kt\">Int</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"kt\">Double</span>\n<span class=\"n\">power</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">given</span> <span class=\"o\">::</span> <span class=\"kt\">Double</span><span class=\"p\">)</span> <span class=\"o\">^</span> <span class=\"p\">(</span><span class=\"n\">given</span> <span class=\"o\">::</span> <span class=\"kt\">Int</span><span class=\"p\">)</span>\n\n<span class=\"c1\">-- \u3053\u3093\u306a\u611f\u3058\u3002newtype\u3067\u5305\u3081\u3070\u540c\u3058\u578b\u3082\u4f7f\u7528\u51fa\u6765\u308b\u3002</span>\n<span class=\"c1\">-- newtype Base = Base { unBase :: Int }</span>\n<span class=\"c1\">-- newtype Exp  = Exp  { unExp  :: Int }</span>\n<span class=\"c1\">-- power :: (Given Base, Given Exp) =&gt; Int</span>\n<span class=\"c1\">-- power = unBase given ^ unExp given</span>\n\n<span class=\"n\">main</span> <span class=\"o\">::</span> <span class=\"kt\">IO</span> <span class=\"nb\">()</span>\n<span class=\"n\">main</span> <span class=\"o\">=</span> <span class=\"n\">give</span> <span class=\"p\">(</span><span class=\"mi\">2</span> <span class=\"o\">::</span> <span class=\"kt\">Double</span><span class=\"p\">)</span> <span class=\"o\">$</span> <span class=\"n\">give</span> <span class=\"p\">(</span><span class=\"mi\">4</span> <span class=\"o\">::</span> <span class=\"kt\">Int</span><span class=\"p\">)</span> <span class=\"o\">$</span>\n    <span class=\"n\">print</span> <span class=\"n\">power</span>\n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"bash\">\n<div class=\"code-lang\"><span class=\"bold\">\u5b9f\u884c\u7d50\u679c</span></div>\n<div class=\"highlight\"><pre><span class=\"nv\">$ </span>runhaskell Given.hs\n16.0\n</pre></div>\n</div>\n\n<p>\u3053\u306e\u3088\u3046\u306b\u3001\u3069\u3061\u3089\u3092\u4f7f\u7528\u3057\u3066\u3082\u5f15\u6570\u3067\u5f15\u304d\u307e\u308f\u3059\u3053\u3068\u306a\u304f\u8a2d\u5b9a\u3092\u6e21\u3059\u3053\u3068\u304c\u51fa\u6765\u307e\u3057\u305f\u304c\u3001ImplicitParams\u306e\u65b9\u304c\u578b\u6ce8\u91c8\u304c\u4e0d\u8981\u3060\u3063\u305f\u308a\u3001\u591a\u76f8\u578b\u3092\u4f7f\u7528\u51fa\u6765\u305f\u308a(Given\u3067\u3082\u5b58\u5728\u578b\u3068\u304b\u3067\u51fa\u6765\u308b\u304b\u3082\uff1f(\u672a\u78ba\u8a8d))\u3068\u3001\u4fbf\u5229\u305d\u3046\u306b\u898b\u3048\u307e\u3059\u3002</p>\n\n<p>\u3057\u304b\u3057\u3001Given\u306b\u3082\u5229\u70b9\u306f\u3042\u308a\u3001(\u73fe\u6642\u70b9\u3067\u306f)ImplicitParams\u3067\u306f\u51fa\u6765\u306a\u3044\u3001instance\u5ba3\u8a00\u3067\u306e\u5236\u7d04\u3068\u3057\u3066\u4f7f\u7528\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002</p>\n\n<div class=\"code-frame\" data-lang=\"hs\">\n<div class=\"code-lang\"><span class=\"bold\">instance.hs</span></div>\n<div class=\"highlight\"><pre><span class=\"cp\">{-# LANGUAGE NoMonomorphismRestriction #-}</span>\n<span class=\"cp\">{-# LANGUAGE UndecidableInstances #-}</span>\n\n<span class=\"kr\">import</span> <span class=\"nn\">Data.Reflection</span>\n<span class=\"kr\">import</span> <span class=\"nn\">Data.Proxy</span>\n\n<span class=\"kr\">class</span> <span class=\"kt\">Power</span> <span class=\"n\">a</span> <span class=\"kr\">where</span>\n  <span class=\"n\">power</span> <span class=\"o\">::</span> <span class=\"n\">proxy</span> <span class=\"n\">a</span> <span class=\"o\">-&gt;</span> <span class=\"n\">a</span>\n\n<span class=\"kr\">instance</span> <span class=\"p\">(</span><span class=\"kt\">Given</span> <span class=\"kt\">Int</span><span class=\"p\">,</span> <span class=\"kt\">Given</span> <span class=\"kt\">Double</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"kt\">Power</span> <span class=\"kt\">Double</span> <span class=\"kr\">where</span>\n    <span class=\"n\">power</span> <span class=\"kr\">_</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">given</span> <span class=\"o\">::</span> <span class=\"kt\">Double</span><span class=\"p\">)</span> <span class=\"o\">^</span> <span class=\"p\">(</span><span class=\"n\">given</span> <span class=\"o\">::</span> <span class=\"kt\">Int</span><span class=\"p\">)</span>\n\n<span class=\"c1\">--instance (?dbl :: Double, ?int :: Int) =&gt; Power Double where</span>\n<span class=\"c1\">--    power _ = ?dbl ^ ?int</span>\n\n<span class=\"c1\">-- \u3053\u3093\u306a\u611f\u3058\u306e\u30a8\u30e9\u30fc\u304c\u51fa\u308b\u3002</span>\n<span class=\"c1\">-- Illegal implict parameter \u2018?dbl::Double\u2019</span>\n<span class=\"c1\">-- In the context: (?dbl::Double, ?int::Int)</span>\n<span class=\"c1\">-- While checking an instance declaration</span>\n<span class=\"c1\">-- In the instance declaration for \u2018Power Double\u2019</span>\n\n\n<span class=\"n\">main</span> <span class=\"o\">::</span> <span class=\"kt\">IO</span> <span class=\"nb\">()</span>\n<span class=\"n\">main</span> <span class=\"o\">=</span> <span class=\"n\">give</span> <span class=\"p\">(</span><span class=\"mi\">2</span> <span class=\"o\">::</span> <span class=\"kt\">Double</span><span class=\"p\">)</span> <span class=\"o\">$</span> <span class=\"n\">give</span> <span class=\"p\">(</span><span class=\"mi\">4</span> <span class=\"o\">::</span> <span class=\"kt\">Int</span><span class=\"p\">)</span> <span class=\"o\">$</span>\n    <span class=\"n\">print</span> <span class=\"o\">$</span> <span class=\"n\">power</span> <span class=\"p\">(</span><span class=\"kt\">Proxy</span> <span class=\"o\">::</span> <span class=\"kt\">Proxy</span> <span class=\"kt\">Double</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n\n<p>\u3053\u308c\u304c\u7d50\u69cb\u4fbf\u5229\u306a\u306e\u3067(<a href=\"https://github.com/philopon/apiary/blob/master/apiary-logger/src/Web/Apiary/Logger.hs\" rel=\"nofollow noopener\" target=\"_blank\">apiary/apiary-logger/src/Web/Apiary/Logger.hs at master \u00b7 philopon/apiary</a>\u3053\u306e\u3042\u305f\u308a\u3068\u304b\u3067\u4f7f\u3063\u3066\u308b)\u3001\u305d\u308c\u305e\u308c\u5229\u70b9\u3092\u628a\u63e1\u3057\u3066\u304a\u3044\u3066\u4f7f\u3044\u5206\u3051\u308b\u69d8\u306b\u3059\u308c\u3070\u826f\u3044\u3068\u601d\u3044\u307e\u3059\u3002</p>\n\n<h1>\n<span id=\"\u53c2\u8003\" class=\"fragment\"></span><a href=\"#%E5%8F%82%E8%80%83\"><i class=\"fa fa-link\"></i></a>\u53c2\u8003</h1>\n\n<ul>\n<li><p><a href=\"https://www.fpcomplete.com/user/thoughtpolice/using-reflection\" rel=\"nofollow noopener\" target=\"_blank\">Reflecting values to types and back - School of Haskell | FP Complete</a></p></li>\n<li><p><a href=\"https://ghc.haskell.org/trac/ghc/ticket/7624\" rel=\"nofollow noopener\" target=\"_blank\">#7624 (Handling ImplicitParams in Instance Declaration) \u2013 GHC</a></p></li>\n</ul>\n", "body": "Haskell\u3067\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u3044\u3066\u3044\u308b\u3068\u304d\u3001\u3059\u3053\u3057\u898f\u6a21\u304c\u5927\u304d\u304f\u306a\u308a\u306f\u3058\u3081\u308b\u3068\u3001\u8a2d\u5b9a\u3092\u5f15\u6570\u3067\u5f15\u304d\u307e\u308f\u3059\u306e\u304c\u3064\u3089\u304f\u306a\u3063\u3066\u304f\u308b\u4e8b\u304c\u591a\u3005\u3042\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u305d\u3093\u306a\u3068\u304d\u306b\u4fbf\u5229\u306a\u65b9\u6cd5\u3068\u3057\u3066\u3001ghc\u62e1\u5f35\u306eImplicitParams\u3084reflection\u30d1\u30c3\u30b1\u30fc\u30b8\u306eGiven\u304c\u3042\u308a\u307e\u3059\u3002\n\n\u3068\u308a\u3042\u3048\u305a\u3001\u3079\u304d\u4e57\u95a2\u6570\u306e\u7b2c\u4e00\u3001\u7b2c\u4e8c\u5f15\u6570\u3092\u5f15\u304d\u307e\u308f\u3057\u305f\u3044\u8a2d\u5b9a\u3068\u3057\u3066\u4f7f\u3063\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n\u307e\u305a\u306fImplicitParams\u3067\u3059\u3002\n\n```hs:ImplicitParams.hs\n{-# LANGUAGE ImplicitParams #-}\n{-# LANGUAGE NoMonomorphismRestriction #-}\n\n-- \u578b\u6ce8\u91c8\u306f\u4e0d\u8981\u3002\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u63a8\u8ad6\u3055\u308c\u308b\u3002\n-- power :: (?int::b, ?dbl::a, Num a, Integral b) => a\npower = ?dbl ^ ?int\n\nmain :: IO ()\nmain = do\n    let ?dbl = 2\n        ?int = 4\n    print power\n```\n\n```bash:\u5b9f\u884c\u7d50\u679c\n$ runhaskell ImplicitParams.hs\n16\n```\n\n\u3064\u3065\u3044\u3066\u3001Given\u3092\u4f7f\u3046\u5834\u5408\u3067\u3059\u3002\n\n```hs:Given.hs\n{-# LANGUAGE FlexibleContexts #-}\n\nimport Data.Reflection\n\n-- \u578b\u6ce8\u91c8\u5fc5\u9808\u3002\u5b9f\u969b\u306b\u4f7f\u7528\u3059\u308b\u3068\u304d\u306fnewtype\u3067wrap\u3059\u308b\u65b9\u304c\u826f\u3044\u304b\u3082\u3002\npower :: (Given Double, Given Int) => Double\npower = (given :: Double) ^ (given :: Int)\n\n-- \u3053\u3093\u306a\u611f\u3058\u3002newtype\u3067\u5305\u3081\u3070\u540c\u3058\u578b\u3082\u4f7f\u7528\u51fa\u6765\u308b\u3002\n-- newtype Base = Base { unBase :: Int }\n-- newtype Exp  = Exp  { unExp  :: Int }\n-- power :: (Given Base, Given Exp) => Int\n-- power = unBase given ^ unExp given\n\nmain :: IO ()\nmain = give (2 :: Double) $ give (4 :: Int) $\n    print power\n```\n\n```bash:\u5b9f\u884c\u7d50\u679c\n$ runhaskell Given.hs\n16.0\n```\n\n\u3053\u306e\u3088\u3046\u306b\u3001\u3069\u3061\u3089\u3092\u4f7f\u7528\u3057\u3066\u3082\u5f15\u6570\u3067\u5f15\u304d\u307e\u308f\u3059\u3053\u3068\u306a\u304f\u8a2d\u5b9a\u3092\u6e21\u3059\u3053\u3068\u304c\u51fa\u6765\u307e\u3057\u305f\u304c\u3001ImplicitParams\u306e\u65b9\u304c\u578b\u6ce8\u91c8\u304c\u4e0d\u8981\u3060\u3063\u305f\u308a\u3001\u591a\u76f8\u578b\u3092\u4f7f\u7528\u51fa\u6765\u305f\u308a(Given\u3067\u3082\u5b58\u5728\u578b\u3068\u304b\u3067\u51fa\u6765\u308b\u304b\u3082\uff1f(\u672a\u78ba\u8a8d))\u3068\u3001\u4fbf\u5229\u305d\u3046\u306b\u898b\u3048\u307e\u3059\u3002\n\n\u3057\u304b\u3057\u3001Given\u306b\u3082\u5229\u70b9\u306f\u3042\u308a\u3001(\u73fe\u6642\u70b9\u3067\u306f)ImplicitParams\u3067\u306f\u51fa\u6765\u306a\u3044\u3001instance\u5ba3\u8a00\u3067\u306e\u5236\u7d04\u3068\u3057\u3066\u4f7f\u7528\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002\n\n```hs:instance.hs\n{-# LANGUAGE NoMonomorphismRestriction #-}\n{-# LANGUAGE UndecidableInstances #-}\n\nimport Data.Reflection\nimport Data.Proxy\n\nclass Power a where\n  power :: proxy a -> a\n\ninstance (Given Int, Given Double) => Power Double where\n    power _ = (given :: Double) ^ (given :: Int)\n\n--instance (?dbl :: Double, ?int :: Int) => Power Double where\n--    power _ = ?dbl ^ ?int\n\n-- \u3053\u3093\u306a\u611f\u3058\u306e\u30a8\u30e9\u30fc\u304c\u51fa\u308b\u3002\n-- Illegal implict parameter \u2018?dbl::Double\u2019\n-- In the context: (?dbl::Double, ?int::Int)\n-- While checking an instance declaration\n-- In the instance declaration for \u2018Power Double\u2019\n\n\nmain :: IO ()\nmain = give (2 :: Double) $ give (4 :: Int) $\n    print $ power (Proxy :: Proxy Double)\n```\n\n\u3053\u308c\u304c\u7d50\u69cb\u4fbf\u5229\u306a\u306e\u3067([apiary/apiary-logger/src/Web/Apiary/Logger.hs at master \u00b7 philopon/apiary](https://github.com/philopon/apiary/blob/master/apiary-logger/src/Web/Apiary/Logger.hs)\u3053\u306e\u3042\u305f\u308a\u3068\u304b\u3067\u4f7f\u3063\u3066\u308b)\u3001\u305d\u308c\u305e\u308c\u5229\u70b9\u3092\u628a\u63e1\u3057\u3066\u304a\u3044\u3066\u4f7f\u3044\u5206\u3051\u308b\u69d8\u306b\u3059\u308c\u3070\u826f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u53c2\u8003\n===\n* [Reflecting values to types and back - School of Haskell | FP Complete](https://www.fpcomplete.com/user/thoughtpolice/using-reflection)\n\n* [#7624 (Handling ImplicitParams in Instance Declaration) \u2013 GHC](https://ghc.haskell.org/trac/ghc/ticket/7624)\n", "coediting": false, "comments_count": 0, "created_at": "2014-06-26T02:06:01+09:00", "group": null, "id": "e6d2522f5b514c219a5f", "likes_count": 9, "private": false, "reactions_count": 0, "tags": [{"name": "Haskell", "versions": []}, {"name": "ghc", "versions": ["7.8.2"]}, {"name": "reflection", "versions": ["1.4"]}], "title": "Given\u3068ImplicitParams\u306e\u4f7f\u3044\u5206\u3051", "updated_at": "2014-06-28T15:45:23+09:00", "url": "https://qiita.com/philopon/items/e6d2522f5b514c219a5f", "user": {"description": "", "facebook_id": "", "followees_count": 4, "followers_count": 48, "github_login_name": null, "id": "philopon", "items_count": 18, "linkedin_id": "", "location": "", "name": "", "organization": "", "permanent_id": 33562, "profile_image_url": "https://qiita-image-store.s3.amazonaws.com/0/33562/profile-images/1473686152", "team_only": false, "twitter_screen_name": null, "website_url": "http://philopon.github.io"}, "page_views_count": null}