{"rendered_body": "<p>\u30e2\u30ca\u30c9\u3068\u4e00\u53e3\u306b\u8a00\u3063\u3066\u3082\u5185\u90e8\u5b9f\u88c5\u8272\u3005\u3042\u308b\u306e\u3067\u3001\u540c\u3058\u6a5f\u80fd\u306e\u30e2\u30ca\u30c9\u3092\u8272\u3005\u306a\u66f8\u304d\u65b9\u3067\u66f8\u3044\u3066\u307f\u307e\u3059\u3002</p>\n\n<h1>\n<span id=\"\u8981\u4ef6\" class=\"fragment\"></span><a href=\"#%E8%A6%81%E4%BB%B6\"><i class=\"fa fa-link\"></i></a>\u8981\u4ef6</h1>\n\n<p>\u3042\u307e\u308a\u8907\u96d1\u306b\u3057\u3066\u3082\u30a2\u30ec\u306a\u306e\u3067\u3001State,Writer\u3068IO\u306e\u5236\u7d04\u304f\u3089\u3044\u306b\u3057\u3066\u304a\u304d\u307e\u3059\u3002</p>\n\n<ul>\n<li>\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306f<code>Functor</code>, <code>Applicative</code>, <code>Monad</code>\u306e\u307f</li>\n<li>\u5185\u90e8\u306b<code>Int</code>\u3067<code>0</code>\u958b\u59cb\u306e\u30ab\u30a6\u30f3\u30bf\u3068\u3001<code>DList Log</code>\u3067\u8868\u73fe\u3055\u308c\u308b\u30ed\u30b0\u3092\u6301\u3064</li>\n<li>\n<code>incr :: Int -&gt; DSL ()</code>\u3067\u30ab\u30a6\u30f3\u30bf\u3092\u5897\u6e1b\u3057\u3001\u30ed\u30b0\u306b<code>I i</code>\u3092\u8ffd\u52a0</li>\n<li>\n<code>reset :: DSL ()</code>\u3067\u30ab\u30a6\u30f3\u30bf\u30920\u306b\u623b\u3057\u3001\u30ed\u30b0\u306b<code>R</code>\u3092\u8ffd\u52a0</li>\n<li>\n<code>current :: DSL ()</code>\u3067\u6a19\u6e96\u51fa\u529b\u306b\u73fe\u5728\u306e\u30ab\u30a6\u30f3\u30c8\u3092\u51fa\u529b\u3002\u6587\u8108\u5185\u3067\u305d\u308c\u4ee5\u5916\u306eIO\u306f\u4e0d\u53ef\u80fd\u3068\u3059\u308b</li>\n<li>\n<code>runDSL :: DSL () -&gt; IO (Int, [Log])</code>\u3067DSL\u3092\u5b9f\u884c\u3057\u3001\u6700\u5f8c\u306e\u30ab\u30a6\u30f3\u30bf\u306e\u5024\u3068\u30ed\u30b0\u3092\u8fd4\u3059\u3002</li>\n</ul>\n\n<p>Log\u30c7\u30fc\u30bf\u578b\u306f\u3053\u3093\u306a\u611f\u3058\u306b\u3057\u3066\u5171\u901a\u306b\u4f7f\u7528\u3057\u3001</p>\n\n<div class=\"code-frame\" data-lang=\"haskell\">\n<div class=\"code-lang\"><span class=\"bold\">Common.hs</span></div>\n<div class=\"highlight\"><pre><span class=\"kr\">module</span> <span class=\"nn\">Common</span> <span class=\"p\">(</span><span class=\"kt\">Log</span><span class=\"p\">(</span><span class=\"o\">..</span><span class=\"p\">))</span> <span class=\"kr\">where</span>\n\n<span class=\"kr\">data</span> <span class=\"kt\">Log</span> <span class=\"o\">=</span> <span class=\"kt\">I</span> <span class=\"kt\">Int</span> <span class=\"o\">|</span> <span class=\"kt\">R</span>\n\n<span class=\"kr\">instance</span> <span class=\"kt\">Show</span> <span class=\"kt\">Log</span> <span class=\"kr\">where</span>\n    <span class=\"n\">show</span> <span class=\"p\">(</span><span class=\"kt\">I</span> <span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">show</span> <span class=\"n\">i</span>\n    <span class=\"n\">show</span> <span class=\"kt\">R</span>     <span class=\"o\">=</span> <span class=\"s\">\"RESET\"</span>\n</pre></div>\n</div>\n\n<p>\u4ee5\u4e0b\u306eMain.hs\u306e\u5b9f\u884c\u7d50\u679c\u306f</p>\n\n<div class=\"code-frame\" data-lang=\"haskell\">\n<div class=\"code-lang\"><span class=\"bold\">Main.hs</span></div>\n<div class=\"highlight\"><pre><span class=\"kr\">import</span> <span class=\"nn\">XXX</span>\n\n<span class=\"n\">main</span> <span class=\"o\">::</span> <span class=\"kt\">IO</span> <span class=\"nb\">()</span>\n<span class=\"n\">main</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"o\">&gt;&gt;=</span> <span class=\"n\">print</span><span class=\"p\">)</span> <span class=\"o\">$</span> <span class=\"n\">runDSL</span> <span class=\"o\">$</span> <span class=\"kr\">do</span>\n    <span class=\"n\">incr</span> <span class=\"mi\">2</span>\n    <span class=\"n\">current</span>\n    <span class=\"n\">incr</span> <span class=\"mi\">5</span>\n    <span class=\"n\">incr</span> <span class=\"mi\">1</span>\n    <span class=\"n\">reset</span>\n    <span class=\"n\">incr</span> <span class=\"mi\">3</span>\n    <span class=\"n\">current</span>\n</pre></div>\n</div>\n\n<p>\u5168\u3066</p>\n\n<div class=\"code-frame\" data-lang=\"shell\">\n<div class=\"code-lang\"><span class=\"bold\">out.sh</span></div>\n<div class=\"highlight\"><pre>2\n3\n<span class=\"o\">(</span>3,[2,5,1,RESET,3]<span class=\"o\">)</span>\n</pre></div>\n</div>\n\n<p>\u306b\u306a\u308b\u611f\u3058\u3067\u3059\u3002</p>\n\n<h1>\n<span id=\"stacked\" class=\"fragment\"></span><a href=\"#stacked\"><i class=\"fa fa-link\"></i></a>Stacked</h1>\n\n<p>\u666e\u901a\u306b\u30e2\u30ca\u30c9\u5909\u63db\u5b50\u3092\u7a4d\u3093\u3067newtype\u3067\u5305\u3080\u6614\u306a\u304c\u3089\u306e\u65b9\u6cd5<br>\n\u3082\u3061\u308d\u3093RWST\u3067\u3082OK\u3002</p>\n\n<div class=\"code-frame\" data-lang=\"haskell\">\n<div class=\"code-lang\"><span class=\"bold\">Stacked.hs</span></div>\n<div class=\"highlight\"><pre><span class=\"cp\">{-# LANGUAGE GeneralizedNewtypeDeriving #-}</span>\n\n<span class=\"kr\">module</span> <span class=\"nn\">Stacked</span> <span class=\"p\">(</span><span class=\"kt\">DSL</span><span class=\"p\">,</span> <span class=\"nf\">runDSL</span><span class=\"p\">,</span> <span class=\"nf\">incr</span><span class=\"p\">,</span> <span class=\"nf\">reset</span><span class=\"p\">,</span> <span class=\"nf\">current</span><span class=\"p\">)</span> <span class=\"kr\">where</span>\n\n<span class=\"kr\">import</span> <span class=\"nn\">Control.Applicative</span><span class=\"p\">(</span><span class=\"kt\">Applicative</span><span class=\"p\">)</span>\n<span class=\"kr\">import</span> <span class=\"nn\">Control.Monad.IO.Class</span><span class=\"p\">(</span><span class=\"n\">liftIO</span><span class=\"p\">)</span>\n<span class=\"kr\">import</span> <span class=\"nn\">Control.Monad.Trans.Class</span><span class=\"p\">(</span><span class=\"n\">lift</span><span class=\"p\">)</span>\n<span class=\"kr\">import</span> <span class=\"nn\">Control.Monad.Trans.Writer</span>\n<span class=\"kr\">import</span> <span class=\"nn\">Control.Monad.Trans.State</span>\n\n<span class=\"kr\">import</span> <span class=\"nn\">Common</span>\n<span class=\"kr\">import</span> <span class=\"nn\">Data.DList</span>\n\n<span class=\"kr\">newtype</span> <span class=\"kt\">DSL</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"kt\">DSL</span> <span class=\"p\">{</span> <span class=\"n\">unDSL</span> <span class=\"o\">::</span> <span class=\"kt\">StateT</span> <span class=\"kt\">Int</span> <span class=\"p\">(</span><span class=\"kt\">WriterT</span> <span class=\"p\">(</span><span class=\"kt\">DList</span> <span class=\"kt\">Log</span><span class=\"p\">)</span> <span class=\"kt\">IO</span><span class=\"p\">)</span> <span class=\"n\">a</span> <span class=\"p\">}</span>\n    <span class=\"kr\">deriving</span> <span class=\"p\">(</span><span class=\"kt\">Functor</span><span class=\"p\">,</span> <span class=\"kt\">Applicative</span><span class=\"p\">,</span> <span class=\"kt\">Monad</span><span class=\"p\">)</span>\n\n<span class=\"n\">runDSL</span> <span class=\"o\">::</span> <span class=\"kt\">DSL</span> <span class=\"nb\">()</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">IO</span> <span class=\"p\">(</span><span class=\"kt\">Int</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"kt\">Log</span><span class=\"p\">])</span>\n<span class=\"n\">runDSL</span> <span class=\"o\">=</span> <span class=\"n\">fmap</span> <span class=\"p\">(</span><span class=\"n\">fmap</span> <span class=\"n\">toList</span><span class=\"p\">)</span> <span class=\"o\">.</span> <span class=\"n\">runWriterT</span> <span class=\"o\">.</span> <span class=\"n\">flip</span> <span class=\"n\">execStateT</span> <span class=\"mi\">0</span> <span class=\"o\">.</span> <span class=\"n\">unDSL</span>\n\n<span class=\"n\">incr</span> <span class=\"o\">::</span> <span class=\"kt\">Int</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">DSL</span> <span class=\"nb\">()</span>\n<span class=\"n\">incr</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"kt\">DSL</span> <span class=\"o\">$</span> <span class=\"kr\">do</span>\n    <span class=\"n\">modify</span> <span class=\"p\">(</span><span class=\"o\">+</span> <span class=\"n\">i</span><span class=\"p\">)</span>\n    <span class=\"n\">lift</span> <span class=\"o\">$</span> <span class=\"n\">tell</span> <span class=\"p\">(</span><span class=\"n\">singleton</span> <span class=\"o\">$</span> <span class=\"kt\">I</span> <span class=\"n\">i</span><span class=\"p\">)</span>\n\n<span class=\"n\">reset</span> <span class=\"o\">::</span> <span class=\"kt\">DSL</span> <span class=\"nb\">()</span>\n<span class=\"n\">reset</span> <span class=\"o\">=</span> <span class=\"kt\">DSL</span> <span class=\"o\">$</span> <span class=\"kr\">do</span>\n    <span class=\"n\">put</span> <span class=\"mi\">0</span>\n    <span class=\"n\">lift</span> <span class=\"o\">$</span> <span class=\"n\">tell</span> <span class=\"p\">(</span><span class=\"n\">singleton</span> <span class=\"kt\">R</span><span class=\"p\">)</span>\n\n<span class=\"n\">current</span> <span class=\"o\">::</span> <span class=\"kt\">DSL</span> <span class=\"nb\">()</span>\n<span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"kt\">DSL</span> <span class=\"o\">$</span> <span class=\"n\">get</span> <span class=\"o\">&gt;&gt;=</span> <span class=\"n\">liftIO</span> <span class=\"o\">.</span> <span class=\"n\">print</span>\n</pre></div>\n</div>\n\n<h1>\n<span id=\"flat\" class=\"fragment\"></span><a href=\"#flat\"><i class=\"fa fa-link\"></i></a>Flat</h1>\n\n<p>\u7a4d\u3093\u3067\u308b\u30e2\u30ca\u30c9\u5909\u63db\u5b50\u3092\u30d5\u30e9\u30c3\u30c8\u306b\u3002\u3061\u3087\u3063\u3068\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u306b\u554f\u984c\u304c\u51fa\u305f\u6642\u306a\u3069\u306b\u8a66\u3059\u3068\u826f\u3044\u304b\u3082\u3002</p>\n\n<div class=\"code-frame\" data-lang=\"haskell\">\n<div class=\"code-lang\"><span class=\"bold\">Flat.hs</span></div>\n<div class=\"highlight\"><pre><span class=\"kr\">module</span> <span class=\"nn\">Flat</span> <span class=\"p\">(</span><span class=\"kt\">DSL</span><span class=\"p\">,</span> <span class=\"nf\">runDSL</span><span class=\"p\">,</span> <span class=\"nf\">incr</span><span class=\"p\">,</span> <span class=\"nf\">reset</span><span class=\"p\">,</span> <span class=\"nf\">current</span><span class=\"p\">)</span> <span class=\"kr\">where</span>\n\n<span class=\"kr\">import</span> <span class=\"nn\">Control.Applicative</span><span class=\"p\">(</span><span class=\"kt\">Applicative</span><span class=\"p\">(</span><span class=\"o\">..</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"o\">&lt;$&gt;</span><span class=\"p\">))</span>\n\n<span class=\"kr\">import</span> <span class=\"nn\">Common</span>\n<span class=\"kr\">import</span> <span class=\"nn\">Data.DList</span>\n\n<span class=\"kr\">newtype</span> <span class=\"kt\">DSL</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"kt\">DSL</span> <span class=\"p\">{</span> <span class=\"n\">unDSL</span> <span class=\"o\">::</span> <span class=\"kt\">Int</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">IO</span> <span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"kt\">Int</span><span class=\"p\">,</span> <span class=\"kt\">DList</span> <span class=\"kt\">Log</span><span class=\"p\">)</span> <span class=\"p\">}</span>\n\n<span class=\"kr\">instance</span> <span class=\"kt\">Functor</span> <span class=\"kt\">DSL</span> <span class=\"kr\">where</span>\n    <span class=\"n\">fmap</span> <span class=\"n\">f</span> <span class=\"p\">(</span><span class=\"kt\">DSL</span> <span class=\"n\">m</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"kt\">DSL</span> <span class=\"o\">$</span> <span class=\"nf\">\\</span><span class=\"n\">i</span> <span class=\"o\">-&gt;</span> <span class=\"kr\">do</span>\n        <span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">i'</span><span class=\"p\">,</span> <span class=\"n\">l</span><span class=\"p\">)</span> <span class=\"o\">&lt;-</span> <span class=\"n\">m</span> <span class=\"n\">i</span>\n        <span class=\"n\">return</span> <span class=\"p\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">i'</span><span class=\"p\">,</span> <span class=\"n\">l</span><span class=\"p\">)</span>\n\n<span class=\"kr\">instance</span> <span class=\"kt\">Applicative</span> <span class=\"kt\">DSL</span> <span class=\"kr\">where</span>\n    <span class=\"n\">pure</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"kt\">DSL</span> <span class=\"o\">$</span> <span class=\"nf\">\\</span><span class=\"n\">i</span> <span class=\"o\">-&gt;</span> <span class=\"n\">return</span> <span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">empty</span><span class=\"p\">)</span>\n    <span class=\"kt\">DSL</span> <span class=\"n\">mf</span> <span class=\"o\">&lt;*&gt;</span> <span class=\"kt\">DSL</span> <span class=\"n\">ma</span> <span class=\"o\">=</span> <span class=\"kt\">DSL</span> <span class=\"o\">$</span> <span class=\"nf\">\\</span><span class=\"n\">i</span> <span class=\"o\">-&gt;</span> <span class=\"kr\">do</span>\n        <span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"n\">i'</span><span class=\"p\">,</span>  <span class=\"n\">l</span><span class=\"p\">)</span>  <span class=\"o\">&lt;-</span> <span class=\"n\">mf</span> <span class=\"n\">i</span>\n        <span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">i''</span><span class=\"p\">,</span> <span class=\"n\">l'</span><span class=\"p\">)</span> <span class=\"o\">&lt;-</span> <span class=\"n\">ma</span> <span class=\"n\">i'</span>\n        <span class=\"n\">return</span> <span class=\"p\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">i''</span><span class=\"p\">,</span> <span class=\"n\">l</span> <span class=\"p\">`</span><span class=\"n\">append</span><span class=\"p\">`</span> <span class=\"n\">l'</span><span class=\"p\">)</span>\n\n<span class=\"kr\">instance</span> <span class=\"kt\">Monad</span> <span class=\"kt\">DSL</span> <span class=\"kr\">where</span>\n    <span class=\"n\">return</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"kt\">DSL</span> <span class=\"o\">$</span> <span class=\"nf\">\\</span><span class=\"n\">i</span> <span class=\"o\">-&gt;</span> <span class=\"n\">return</span> <span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">empty</span><span class=\"p\">)</span>\n    <span class=\"kt\">DSL</span> <span class=\"n\">m</span> <span class=\"o\">&gt;&gt;=</span> <span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"kt\">DSL</span> <span class=\"o\">$</span> <span class=\"nf\">\\</span><span class=\"n\">i</span> <span class=\"o\">-&gt;</span> <span class=\"kr\">do</span>\n        <span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">i'</span><span class=\"p\">,</span>  <span class=\"n\">l</span><span class=\"p\">)</span>  <span class=\"o\">&lt;-</span> <span class=\"n\">m</span> <span class=\"n\">i</span>\n        <span class=\"c1\">-- \u4e2d\u306e\u6587\u8108(\u3053\u3053\u3067\u306fIO)\u3092\u610f\u8b58\u3057\u3066\u3001</span>\n        <span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">i''</span><span class=\"p\">,</span> <span class=\"n\">l'</span><span class=\"p\">)</span> <span class=\"o\">&lt;-</span> <span class=\"n\">unDSL</span> <span class=\"p\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"n\">i'</span>\n        <span class=\"c1\">--                    ~~~~~ &lt;- DSL b\u306a\u306e\u3067unDSL\u3057\u3066IO\u306e\u6587\u8108\u306b</span>\n        <span class=\"n\">return</span> <span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">i''</span><span class=\"p\">,</span> <span class=\"n\">l</span> <span class=\"p\">`</span><span class=\"n\">append</span><span class=\"p\">`</span> <span class=\"n\">l'</span><span class=\"p\">)</span>\n        <span class=\"c1\">-- \u5168\u90e8\u306e\u5909\u6570\u3092\u4f7f\u3044\u5207\u308b\u4e8b\u3092\u610f\u8b58\u3059\u308c\u3070\u66f8\u304d\u3084\u3059\u3044\u6c17\u304c\u3059\u308b\u3002</span>\n\n<span class=\"n\">runDSL</span> <span class=\"o\">::</span> <span class=\"kt\">DSL</span> <span class=\"nb\">()</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">IO</span> <span class=\"p\">(</span><span class=\"kt\">Int</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"kt\">Log</span><span class=\"p\">])</span>\n<span class=\"n\">runDSL</span> <span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nf\">\\</span><span class=\"p\">(</span><span class=\"kr\">_</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">l</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">toList</span> <span class=\"n\">l</span><span class=\"p\">))</span> <span class=\"o\">&lt;$&gt;</span> <span class=\"n\">unDSL</span> <span class=\"n\">m</span> <span class=\"mi\">0</span>\n\n<span class=\"n\">incr</span> <span class=\"o\">::</span> <span class=\"kt\">Int</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">DSL</span> <span class=\"nb\">()</span>\n<span class=\"n\">incr</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"kt\">DSL</span> <span class=\"o\">$</span> <span class=\"nf\">\\</span><span class=\"n\">c</span> <span class=\"o\">-&gt;</span> <span class=\"n\">return</span> <span class=\"p\">(</span><span class=\"nb\">()</span><span class=\"p\">,</span> <span class=\"n\">c</span> <span class=\"o\">+</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">singleton</span> <span class=\"o\">$</span> <span class=\"kt\">I</span> <span class=\"n\">i</span><span class=\"p\">)</span>\n\n<span class=\"n\">reset</span> <span class=\"o\">::</span> <span class=\"kt\">DSL</span> <span class=\"nb\">()</span>\n<span class=\"n\">reset</span> <span class=\"o\">=</span> <span class=\"kt\">DSL</span> <span class=\"o\">$</span> <span class=\"nf\">\\</span><span class=\"kr\">_</span> <span class=\"o\">-&gt;</span> <span class=\"n\">return</span> <span class=\"p\">(</span><span class=\"nb\">()</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">singleton</span> <span class=\"kt\">R</span><span class=\"p\">)</span>\n\n<span class=\"n\">current</span> <span class=\"o\">::</span> <span class=\"kt\">DSL</span> <span class=\"nb\">()</span>\n<span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"kt\">DSL</span> <span class=\"o\">$</span> <span class=\"nf\">\\</span><span class=\"n\">c</span> <span class=\"o\">-&gt;</span> <span class=\"n\">print</span> <span class=\"n\">c</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">return</span> <span class=\"p\">(</span><span class=\"nb\">()</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">empty</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n\n<h1>\n<span id=\"cps\" class=\"fragment\"></span><a href=\"#cps\"><i class=\"fa fa-link\"></i></a>CPS</h1>\n\n<p>CPS\u5909\u63db\u3002\u901f\u3044\u3068\u304b\u3044\u3046\u5642\u3002\u5b9f\u969b\u901f\u3044\u4e8b\u304c\u591a\u3044\u6c17\u304c\u3059\u308b\u3002</p>\n\n<div class=\"code-frame\" data-lang=\"haskell\">\n<div class=\"code-lang\"><span class=\"bold\">CPS.hs</span></div>\n<div class=\"highlight\"><pre><span class=\"cp\">{-# LANGUAGE Rank2Types #-}</span>\n\n<span class=\"kr\">module</span> <span class=\"nn\">CPS</span> <span class=\"p\">(</span><span class=\"kt\">DSL</span><span class=\"p\">,</span> <span class=\"nf\">runDSL</span><span class=\"p\">,</span> <span class=\"nf\">incr</span><span class=\"p\">,</span> <span class=\"nf\">reset</span><span class=\"p\">,</span> <span class=\"nf\">current</span><span class=\"p\">)</span> <span class=\"kr\">where</span>\n\n<span class=\"kr\">import</span> <span class=\"nn\">Control.Applicative</span><span class=\"p\">(</span><span class=\"kt\">Applicative</span><span class=\"p\">(</span><span class=\"o\">..</span><span class=\"p\">))</span>\n\n<span class=\"kr\">import</span> <span class=\"nn\">Common</span>\n<span class=\"kr\">import</span> <span class=\"nn\">Data.DList</span>\n\n<span class=\"kr\">newtype</span> <span class=\"kt\">DSL</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"kt\">DSL</span> <span class=\"p\">{</span> <span class=\"n\">unDSL</span> <span class=\"o\">::</span> <span class=\"n\">forall</span> <span class=\"n\">r</span><span class=\"o\">.</span> <span class=\"kt\">Int</span> <span class=\"o\">-&gt;</span> <span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">Int</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">DList</span> <span class=\"kt\">Log</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">IO</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">IO</span> <span class=\"n\">r</span> <span class=\"p\">}</span>\n<span class=\"c1\">--Reader\u3068\u304bState\u306e\u5165\u529b\u90e8\u5206\u3092\u307e\u305a\u4e26\u3079\u3066 -&gt; ~~~    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span>\n<span class=\"c1\">--                                              \u7d99\u7d9a\u90e8\u5206\u306fa\u3068Writer\u3068\u304bState\u306e\u51fa\u529b\u90e8\u5206\u3092\u3068\u308a\u3001\u5185\u90e8\u306e\u30e2\u30ca\u30c9(\u7121\u3051\u308c\u3070r\u3067ok)\u3092\u8fd4\u3059\u95a2\u6570</span>\n\n\n<span class=\"c1\">-- \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306fStacked.hs\u3068\u305d\u3093\u306a\u306b\u5909\u3089\u306a\u3044\u3002</span>\n<span class=\"kr\">instance</span> <span class=\"kt\">Functor</span> <span class=\"kt\">DSL</span> <span class=\"kr\">where</span>\n    <span class=\"n\">fmap</span> <span class=\"n\">f</span> <span class=\"p\">(</span><span class=\"kt\">DSL</span> <span class=\"n\">m</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"kt\">DSL</span> <span class=\"o\">$</span> <span class=\"nf\">\\</span><span class=\"n\">i</span> <span class=\"n\">cont</span> <span class=\"o\">-&gt;</span> <span class=\"n\">m</span> <span class=\"n\">i</span> <span class=\"p\">(</span><span class=\"nf\">\\</span><span class=\"n\">a</span> <span class=\"n\">i'</span> <span class=\"n\">l</span> <span class=\"o\">-&gt;</span> <span class=\"n\">cont</span> <span class=\"p\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"n\">i'</span> <span class=\"n\">l</span><span class=\"p\">)</span>\n\n<span class=\"kr\">instance</span> <span class=\"kt\">Applicative</span> <span class=\"kt\">DSL</span> <span class=\"kr\">where</span>\n    <span class=\"n\">pure</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"kt\">DSL</span> <span class=\"o\">$</span> <span class=\"nf\">\\</span><span class=\"n\">i</span> <span class=\"n\">cont</span> <span class=\"o\">-&gt;</span> <span class=\"n\">cont</span> <span class=\"n\">a</span> <span class=\"n\">i</span> <span class=\"n\">empty</span>\n    <span class=\"kt\">DSL</span> <span class=\"n\">mf</span> <span class=\"o\">&lt;*&gt;</span> <span class=\"kt\">DSL</span> <span class=\"n\">ma</span> <span class=\"o\">=</span> <span class=\"kt\">DSL</span> <span class=\"o\">$</span> <span class=\"nf\">\\</span><span class=\"n\">i</span> <span class=\"n\">cont</span> <span class=\"o\">-&gt;</span> <span class=\"n\">mf</span> <span class=\"n\">i</span> <span class=\"p\">(</span><span class=\"nf\">\\</span><span class=\"n\">f</span> <span class=\"n\">i'</span> <span class=\"n\">l</span> <span class=\"o\">-&gt;</span> <span class=\"n\">ma</span> <span class=\"n\">i'</span> <span class=\"p\">(</span><span class=\"nf\">\\</span><span class=\"n\">a</span> <span class=\"n\">i''</span> <span class=\"n\">l'</span> <span class=\"o\">-&gt;</span> <span class=\"n\">cont</span> <span class=\"p\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"n\">i''</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"p\">`</span><span class=\"n\">append</span><span class=\"p\">`</span> <span class=\"n\">l'</span><span class=\"p\">)))</span>\n\n<span class=\"kr\">instance</span> <span class=\"kt\">Monad</span> <span class=\"kt\">DSL</span> <span class=\"kr\">where</span>\n    <span class=\"n\">return</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"kt\">DSL</span> <span class=\"o\">$</span> <span class=\"nf\">\\</span><span class=\"n\">i</span> <span class=\"n\">cont</span> <span class=\"o\">-&gt;</span> <span class=\"n\">cont</span> <span class=\"n\">a</span> <span class=\"n\">i</span> <span class=\"n\">empty</span>\n    <span class=\"kt\">DSL</span> <span class=\"n\">m</span> <span class=\"o\">&gt;&gt;=</span> <span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"kt\">DSL</span> <span class=\"o\">$</span> <span class=\"nf\">\\</span><span class=\"n\">i</span> <span class=\"n\">cont</span> <span class=\"o\">-&gt;</span> <span class=\"n\">m</span> <span class=\"n\">i</span> <span class=\"p\">(</span><span class=\"nf\">\\</span><span class=\"n\">a</span> <span class=\"n\">i'</span> <span class=\"n\">l</span> <span class=\"o\">-&gt;</span> <span class=\"n\">unDSL</span> <span class=\"p\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"n\">i'</span> <span class=\"p\">(</span><span class=\"nf\">\\</span><span class=\"n\">b</span> <span class=\"n\">i''</span> <span class=\"n\">l'</span> <span class=\"o\">-&gt;</span> <span class=\"n\">cont</span> <span class=\"n\">b</span> <span class=\"n\">i''</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"p\">`</span><span class=\"n\">append</span><span class=\"p\">`</span> <span class=\"n\">l'</span><span class=\"p\">)))</span>\n\n<span class=\"n\">runDSL</span> <span class=\"o\">::</span> <span class=\"kt\">DSL</span> <span class=\"nb\">()</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">IO</span> <span class=\"p\">(</span><span class=\"kt\">Int</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"kt\">Log</span><span class=\"p\">])</span>\n<span class=\"n\">runDSL</span> <span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"n\">unDSL</span> <span class=\"n\">m</span> <span class=\"mi\">0</span> <span class=\"p\">(</span><span class=\"nf\">\\</span><span class=\"kr\">_</span> <span class=\"n\">i</span> <span class=\"n\">l</span> <span class=\"o\">-&gt;</span> <span class=\"n\">return</span> <span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">toList</span> <span class=\"n\">l</span><span class=\"p\">))</span>\n\n<span class=\"n\">incr</span> <span class=\"o\">::</span> <span class=\"kt\">Int</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">DSL</span> <span class=\"nb\">()</span>\n<span class=\"n\">incr</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"kt\">DSL</span> <span class=\"o\">$</span> <span class=\"nf\">\\</span><span class=\"n\">c</span> <span class=\"n\">cont</span> <span class=\"o\">-&gt;</span> <span class=\"n\">cont</span> <span class=\"nb\">()</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"n\">c</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">singleton</span> <span class=\"o\">$</span> <span class=\"kt\">I</span> <span class=\"n\">i</span><span class=\"p\">)</span>\n\n<span class=\"n\">reset</span> <span class=\"o\">::</span> <span class=\"kt\">DSL</span> <span class=\"nb\">()</span>\n<span class=\"n\">reset</span> <span class=\"o\">=</span> <span class=\"kt\">DSL</span> <span class=\"o\">$</span> <span class=\"nf\">\\</span><span class=\"kr\">_</span> <span class=\"n\">cont</span> <span class=\"o\">-&gt;</span> <span class=\"n\">cont</span> <span class=\"nb\">()</span> <span class=\"mi\">0</span> <span class=\"p\">(</span><span class=\"n\">singleton</span> <span class=\"kt\">R</span><span class=\"p\">)</span>\n\n<span class=\"n\">current</span> <span class=\"o\">::</span> <span class=\"kt\">DSL</span> <span class=\"nb\">()</span>\n<span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"kt\">DSL</span> <span class=\"o\">$</span> <span class=\"nf\">\\</span><span class=\"n\">i</span> <span class=\"n\">cont</span> <span class=\"o\">-&gt;</span> <span class=\"n\">print</span> <span class=\"n\">i</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">cont</span> <span class=\"nb\">()</span> <span class=\"n\">i</span> <span class=\"n\">empty</span>\n</pre></div>\n</div>\n\n<h1>\n<span id=\"free\" class=\"fragment\"></span><a href=\"#free\"><i class=\"fa fa-link\"></i></a>Free</h1>\n\n<p>\u3061\u3087\u3063\u3068\u524d\u6d41\u884c\u3063\u3066\u65e2\u306b\u5b9a\u7740\u3057\u305f\u611f\u3042\u308bFree\u30e2\u30ca\u30c9\u3002<code>run</code>\u3068<code>incr</code>\u7b49\u306e\u95a2\u6570\u304c\u72ec\u7acb\u3057\u3066\u308b\u306e\u3067\u3001\u7c21\u5358\u306b\u8907\u6570\u306e<code>run</code>(\u30c7\u30d0\u30c3\u30b0\u7528\u3068\u672c\u756a\u7528\u3068\u304b\u5206\u3051\u308b\u3068\u7f8e\u5473\u3057\u305d\u3046)\u3092\u4f5c\u308c\u308b\u306e\u304c\u826f\u3055\u305d\u3046\u306a\u6c17\u304c\u3059\u308b\u3002</p>\n\n<p>\u5b9a\u756a\u3063\u307d\u3044<a href=\"http://hackage.haskell.org/package/free\" rel=\"nofollow noopener\" target=\"_blank\">free</a>\u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u4f7f\u7528</p>\n\n<div class=\"code-frame\" data-lang=\"haskell\">\n<div class=\"code-lang\"><span class=\"bold\">Free.hs</span></div>\n<div class=\"highlight\"><pre><span class=\"cp\">{-# LANGUAGE DeriveFunctor #-}</span>\n<span class=\"kr\">module</span> <span class=\"nn\">Free</span> <span class=\"p\">(</span><span class=\"kt\">DSL</span><span class=\"p\">,</span> <span class=\"nf\">runDSL</span><span class=\"p\">,</span> <span class=\"nf\">incr</span><span class=\"p\">,</span> <span class=\"nf\">reset</span><span class=\"p\">,</span> <span class=\"nf\">current</span><span class=\"p\">)</span> <span class=\"kr\">where</span>\n\n<span class=\"kr\">import</span> <span class=\"nn\">Control.Monad.Free</span>\n\n<span class=\"kr\">import</span> <span class=\"nn\">Common</span>\n<span class=\"kr\">import</span> <span class=\"nn\">Data.Monoid</span>\n<span class=\"kr\">import</span> <span class=\"nn\">Data.DList</span>\n\n<span class=\"kr\">data</span> <span class=\"kt\">DSLF</span> <span class=\"n\">a</span>\n    <span class=\"o\">=</span> <span class=\"kt\">Incr</span> <span class=\"kt\">Int</span> <span class=\"n\">a</span>\n    <span class=\"o\">|</span> <span class=\"kt\">Reset</span> <span class=\"n\">a</span>\n    <span class=\"o\">|</span> <span class=\"kt\">Current</span> <span class=\"n\">a</span>\n    <span class=\"kr\">deriving</span><span class=\"p\">(</span><span class=\"kt\">Functor</span><span class=\"p\">,</span> <span class=\"kt\">Show</span><span class=\"p\">)</span>\n\n<span class=\"kr\">type</span> <span class=\"kt\">DSL</span> <span class=\"o\">=</span> <span class=\"kt\">Free</span> <span class=\"kt\">DSLF</span>\n\n<span class=\"n\">incr</span> <span class=\"o\">::</span> <span class=\"kt\">Int</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">DSL</span> <span class=\"nb\">()</span>\n<span class=\"n\">incr</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">liftF</span> <span class=\"o\">$</span> <span class=\"kt\">Incr</span> <span class=\"n\">i</span> <span class=\"nb\">()</span>\n\n<span class=\"n\">reset</span> <span class=\"o\">::</span> <span class=\"kt\">DSL</span> <span class=\"nb\">()</span>\n<span class=\"n\">reset</span> <span class=\"o\">=</span> <span class=\"n\">liftF</span> <span class=\"o\">$</span> <span class=\"kt\">Reset</span> <span class=\"nb\">()</span>\n\n<span class=\"n\">current</span> <span class=\"o\">::</span> <span class=\"kt\">DSL</span> <span class=\"nb\">()</span>\n<span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">liftF</span> <span class=\"o\">$</span> <span class=\"kt\">Current</span> <span class=\"nb\">()</span>\n\n<span class=\"n\">runDSL'</span> <span class=\"o\">::</span> <span class=\"kt\">Int</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">DList</span> <span class=\"kt\">Log</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">DSL</span> <span class=\"nb\">()</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">IO</span> <span class=\"p\">(</span><span class=\"kt\">Int</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"kt\">Log</span><span class=\"p\">])</span>\n<span class=\"n\">runDSL'</span> <span class=\"n\">c</span> <span class=\"n\">l</span> <span class=\"p\">(</span><span class=\"kt\">Pure</span> <span class=\"kr\">_</span><span class=\"p\">)</span>           <span class=\"o\">=</span> <span class=\"n\">return</span> <span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">toList</span> <span class=\"n\">l</span><span class=\"p\">)</span>\n<span class=\"n\">runDSL'</span> <span class=\"n\">c</span> <span class=\"n\">l</span> <span class=\"p\">(</span><span class=\"kt\">Free</span> <span class=\"p\">(</span><span class=\"kt\">Incr</span> <span class=\"n\">i</span>  <span class=\"n\">n</span><span class=\"p\">))</span> <span class=\"o\">=</span> <span class=\"n\">runDSL'</span> <span class=\"p\">(</span><span class=\"n\">c</span> <span class=\"o\">+</span> <span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">&lt;&gt;</span> <span class=\"n\">singleton</span> <span class=\"p\">(</span><span class=\"kt\">I</span> <span class=\"n\">i</span><span class=\"p\">))</span> <span class=\"n\">n</span>\n<span class=\"n\">runDSL'</span> <span class=\"kr\">_</span> <span class=\"n\">l</span> <span class=\"p\">(</span><span class=\"kt\">Free</span> <span class=\"p\">(</span><span class=\"kt\">Reset</span>   <span class=\"n\">n</span><span class=\"p\">))</span> <span class=\"o\">=</span> <span class=\"n\">runDSL'</span> <span class=\"mi\">0</span>       <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">&lt;&gt;</span> <span class=\"n\">singleton</span> <span class=\"kt\">R</span><span class=\"p\">)</span>     <span class=\"n\">n</span>\n<span class=\"n\">runDSL'</span> <span class=\"n\">c</span> <span class=\"n\">l</span> <span class=\"p\">(</span><span class=\"kt\">Free</span> <span class=\"p\">(</span><span class=\"kt\">Current</span> <span class=\"n\">n</span><span class=\"p\">))</span> <span class=\"o\">=</span> <span class=\"n\">print</span> <span class=\"n\">c</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">runDSL'</span> <span class=\"n\">c</span> <span class=\"n\">l</span> <span class=\"n\">n</span>\n\n<span class=\"n\">runDSL</span> <span class=\"o\">::</span> <span class=\"kt\">DSL</span> <span class=\"nb\">()</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">IO</span> <span class=\"p\">(</span><span class=\"kt\">Int</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"kt\">Log</span><span class=\"p\">])</span>\n<span class=\"n\">runDSL</span> <span class=\"o\">=</span> <span class=\"n\">runDSL'</span> <span class=\"mi\">0</span> <span class=\"n\">mempty</span>\n</pre></div>\n</div>\n\n<p>\u3042\u3068\u3001<code>Show</code>\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u4ed8\u3051\u3066\u304a\u304f\u3060\u3051\u3067\u3001\u69cb\u6587\u6728\u3092dump\u51fa\u6765\u308b\u306e\u3082\u826f\u3044\u611f\u3058\u3063\u307d\u3044\u3002</p>\n\n<p><code>Main.hs</code>\u306e\u3092dump\u3059\u308b\u3068\u3053\u3093\u306a\u611f\u3058</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>Free (Incr 2 (Free (Current (Free (Incr 5 (Free (Incr 1 (Free (Reset (Free (Incr 3 (Free (Current (Pure ()))))))))))))))\n</pre></div></div>\n\n<h1>\n<span id=\"church\" class=\"fragment\"></span><a href=\"#church\"><i class=\"fa fa-link\"></i></a>Church</h1>\n\n<p>free\u306eChurch\u30e2\u30b8\u30e5\u30fc\u30eb\u3002\u901f\u3044\u3063\u3066\u66f8\u3044\u3066\u308b\u3002</p>\n\n<div class=\"code-frame\" data-lang=\"haskell\">\n<div class=\"code-lang\"><span class=\"bold\">Church.hs</span></div>\n<div class=\"highlight\"><pre><span class=\"cp\">{-# LANGUAGE DeriveFunctor #-}</span>\n<span class=\"kr\">module</span> <span class=\"nn\">Church</span> <span class=\"p\">(</span><span class=\"kt\">DSL</span><span class=\"p\">,</span> <span class=\"nf\">runDSL</span><span class=\"p\">,</span> <span class=\"nf\">incr</span><span class=\"p\">,</span> <span class=\"nf\">reset</span><span class=\"p\">,</span> <span class=\"nf\">current</span><span class=\"p\">)</span> <span class=\"kr\">where</span>\n\n<span class=\"kr\">import</span> <span class=\"nn\">Control.Applicative</span>\n<span class=\"kr\">import</span> <span class=\"nn\">Control.Monad.IO.Class</span>\n<span class=\"kr\">import</span> <span class=\"nn\">Control.Monad.Trans.RWS.Strict</span>\n<span class=\"kr\">import</span> <span class=\"nn\">Control.Monad.Free.Church</span>\n\n<span class=\"kr\">import</span> <span class=\"nn\">Common</span>\n<span class=\"kr\">import</span> <span class=\"nn\">Data.DList</span>\n\n<span class=\"kr\">data</span> <span class=\"kt\">DSLF</span> <span class=\"n\">a</span>\n    <span class=\"o\">=</span> <span class=\"kt\">Incr</span> <span class=\"kt\">Int</span> <span class=\"n\">a</span>\n    <span class=\"o\">|</span> <span class=\"kt\">Reset</span> <span class=\"n\">a</span>\n    <span class=\"o\">|</span> <span class=\"kt\">Current</span> <span class=\"n\">a</span>\n    <span class=\"kr\">deriving</span><span class=\"p\">(</span><span class=\"kt\">Functor</span><span class=\"p\">,</span> <span class=\"kt\">Show</span><span class=\"p\">)</span>\n\n<span class=\"kr\">type</span> <span class=\"kt\">DSL</span> <span class=\"o\">=</span> <span class=\"kt\">F</span> <span class=\"kt\">DSLF</span>\n\n<span class=\"n\">incr</span> <span class=\"o\">::</span> <span class=\"kt\">Int</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">DSL</span> <span class=\"nb\">()</span>\n<span class=\"n\">incr</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">liftF</span> <span class=\"o\">$</span> <span class=\"kt\">Incr</span> <span class=\"n\">i</span> <span class=\"nb\">()</span>\n\n<span class=\"n\">reset</span> <span class=\"o\">::</span> <span class=\"kt\">DSL</span> <span class=\"nb\">()</span>\n<span class=\"n\">reset</span> <span class=\"o\">=</span> <span class=\"n\">liftF</span> <span class=\"o\">$</span> <span class=\"kt\">Reset</span> <span class=\"nb\">()</span>\n\n<span class=\"n\">current</span> <span class=\"o\">::</span> <span class=\"kt\">DSL</span> <span class=\"nb\">()</span>\n<span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">liftF</span> <span class=\"o\">$</span> <span class=\"kt\">Current</span> <span class=\"nb\">()</span>\n\n<span class=\"n\">runDSL'</span> <span class=\"o\">::</span> <span class=\"kt\">DSL</span> <span class=\"n\">a</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">RWST</span> <span class=\"nb\">()</span> <span class=\"p\">(</span><span class=\"kt\">DList</span> <span class=\"kt\">Log</span><span class=\"p\">)</span> <span class=\"kt\">Int</span> <span class=\"kt\">IO</span> <span class=\"n\">a</span>\n<span class=\"n\">runDSL'</span> <span class=\"o\">=</span> <span class=\"n\">foldF</span> <span class=\"n\">advent</span>\n  <span class=\"kr\">where</span>\n    <span class=\"n\">advent</span> <span class=\"p\">(</span><span class=\"kt\">Incr</span> <span class=\"n\">i</span>  <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">modify</span> <span class=\"p\">(</span><span class=\"o\">+</span> <span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">tell</span> <span class=\"p\">(</span><span class=\"n\">singleton</span> <span class=\"o\">$</span> <span class=\"kt\">I</span> <span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">return</span> <span class=\"n\">n</span>\n    <span class=\"n\">advent</span> <span class=\"p\">(</span><span class=\"kt\">Reset</span>   <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">put</span> <span class=\"mi\">0</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">tell</span> <span class=\"p\">(</span><span class=\"n\">singleton</span> <span class=\"kt\">R</span><span class=\"p\">)</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">return</span> <span class=\"n\">n</span>\n    <span class=\"n\">advent</span> <span class=\"p\">(</span><span class=\"kt\">Current</span> <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">get</span> <span class=\"o\">&gt;&gt;=</span> <span class=\"n\">liftIO</span> <span class=\"o\">.</span> <span class=\"n\">print</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">return</span> <span class=\"n\">n</span>\n\n<span class=\"n\">runDSL</span> <span class=\"o\">::</span> <span class=\"kt\">DSL</span> <span class=\"nb\">()</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">IO</span> <span class=\"p\">(</span><span class=\"kt\">Int</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"kt\">Log</span><span class=\"p\">])</span>\n<span class=\"n\">runDSL</span> <span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"n\">fmap</span> <span class=\"n\">toList</span> <span class=\"o\">&lt;$&gt;</span> <span class=\"n\">execRWST</span> <span class=\"p\">(</span><span class=\"n\">runDSL'</span> <span class=\"n\">m</span><span class=\"p\">)</span> <span class=\"nb\">()</span> <span class=\"mi\">0</span>\n</pre></div>\n</div>\n\n<h1>\n<span id=\"operational\" class=\"fragment\"></span><a href=\"#operational\"><i class=\"fa fa-link\"></i></a>Operational</h1>\n\n<p>\u7c73\u7530\u306e\u306a\u3093\u3068\u304b\u304c\u304b\u3093\u3068\u304b\u3067Functor\u3082\u8981\u3089\u306a\u3044\u3068\u304b\u306a\u3093\u3068\u304b\u3067\u3059\u3054\u3044\u3002\u3059\u3054\u3044\u3002</p>\n\n<p><a href=\"http://hackage.haskell.org/package/minioperational\" rel=\"nofollow noopener\" target=\"_blank\">minioperational</a>\u4f7f\u7528</p>\n\n<div class=\"code-frame\" data-lang=\"haskell\">\n<div class=\"code-lang\"><span class=\"bold\">Operational.hs</span></div>\n<div class=\"highlight\"><pre><span class=\"cp\">{-# LANGUAGE DeriveFunctor #-}</span>\n<span class=\"cp\">{-# LANGUAGE GADTs #-}</span>\n\n<span class=\"kr\">module</span> <span class=\"nn\">Operational</span> <span class=\"p\">(</span><span class=\"kt\">DSL</span><span class=\"p\">,</span> <span class=\"nf\">runDSL</span><span class=\"p\">,</span> <span class=\"nf\">incr</span><span class=\"p\">,</span> <span class=\"nf\">reset</span><span class=\"p\">,</span> <span class=\"nf\">current</span><span class=\"p\">)</span> <span class=\"kr\">where</span>\n\n<span class=\"kr\">import</span> <span class=\"nn\">Control.Applicative</span>\n<span class=\"kr\">import</span> <span class=\"nn\">Control.Monad.IO.Class</span>\n<span class=\"kr\">import</span> <span class=\"nn\">Control.Monad.Trans.RWS.Strict</span>\n<span class=\"kr\">import</span> <span class=\"nn\">Control.Monad.Operational.Mini</span>\n\n<span class=\"kr\">import</span> <span class=\"nn\">Common</span>\n<span class=\"kr\">import</span> <span class=\"k\">qualified</span> <span class=\"nn\">Data.DList</span> <span class=\"k\">as</span> <span class=\"n\">D</span>\n\n<span class=\"kr\">data</span> <span class=\"kt\">DSLF</span> <span class=\"n\">a</span> <span class=\"kr\">where</span>\n    <span class=\"kt\">Incr</span> <span class=\"o\">::</span> <span class=\"kt\">Int</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">DSLF</span> <span class=\"nb\">()</span>\n    <span class=\"kt\">Reset</span> <span class=\"o\">::</span> <span class=\"kt\">DSLF</span> <span class=\"nb\">()</span>\n    <span class=\"kt\">Current</span> <span class=\"o\">::</span> <span class=\"kt\">DSLF</span> <span class=\"nb\">()</span>\n\n<span class=\"kr\">type</span> <span class=\"kt\">DSL</span> <span class=\"o\">=</span> <span class=\"kt\">Program</span> <span class=\"kt\">DSLF</span>\n\n<span class=\"n\">incr</span> <span class=\"o\">::</span> <span class=\"kt\">Int</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">DSL</span> <span class=\"nb\">()</span>\n<span class=\"n\">incr</span> <span class=\"o\">=</span> <span class=\"n\">singleton</span> <span class=\"o\">.</span> <span class=\"kt\">Incr</span>\n\n<span class=\"n\">reset</span> <span class=\"o\">::</span> <span class=\"kt\">DSL</span> <span class=\"nb\">()</span>\n<span class=\"n\">reset</span> <span class=\"o\">=</span> <span class=\"n\">singleton</span> <span class=\"kt\">Reset</span>\n\n<span class=\"n\">current</span> <span class=\"o\">::</span> <span class=\"kt\">DSL</span> <span class=\"nb\">()</span>\n<span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">singleton</span> <span class=\"kt\">Current</span>\n\n<span class=\"n\">runDSL'</span> <span class=\"o\">::</span> <span class=\"kt\">DSL</span> <span class=\"n\">a</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">RWST</span> <span class=\"nb\">()</span> <span class=\"p\">(</span><span class=\"kt\">D</span><span class=\"o\">.</span><span class=\"kt\">DList</span> <span class=\"kt\">Log</span><span class=\"p\">)</span> <span class=\"kt\">Int</span> <span class=\"kt\">IO</span> <span class=\"n\">a</span>\n<span class=\"n\">runDSL'</span> <span class=\"o\">=</span> <span class=\"n\">interpret</span> <span class=\"n\">advent</span>\n  <span class=\"kr\">where</span>\n    <span class=\"n\">advent</span> <span class=\"o\">::</span> <span class=\"kt\">DSLF</span> <span class=\"n\">a</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">RWST</span> <span class=\"nb\">()</span> <span class=\"p\">(</span><span class=\"kt\">D</span><span class=\"o\">.</span><span class=\"kt\">DList</span> <span class=\"kt\">Log</span><span class=\"p\">)</span> <span class=\"kt\">Int</span> <span class=\"kt\">IO</span> <span class=\"n\">a</span>\n    <span class=\"n\">advent</span> <span class=\"p\">(</span><span class=\"kt\">Incr</span> <span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">modify</span> <span class=\"p\">(</span><span class=\"o\">+</span> <span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">tell</span> <span class=\"p\">(</span><span class=\"kt\">D</span><span class=\"o\">.</span><span class=\"n\">singleton</span> <span class=\"o\">$</span> <span class=\"kt\">I</span> <span class=\"n\">i</span><span class=\"p\">)</span>\n    <span class=\"n\">advent</span> <span class=\"kt\">Reset</span>    <span class=\"o\">=</span> <span class=\"n\">put</span> <span class=\"mi\">0</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">tell</span> <span class=\"p\">(</span><span class=\"kt\">D</span><span class=\"o\">.</span><span class=\"n\">singleton</span> <span class=\"kt\">R</span><span class=\"p\">)</span>\n    <span class=\"n\">advent</span> <span class=\"kt\">Current</span>  <span class=\"o\">=</span> <span class=\"n\">get</span> <span class=\"o\">&gt;&gt;=</span> <span class=\"n\">liftIO</span> <span class=\"o\">.</span> <span class=\"n\">print</span>\n\n<span class=\"n\">runDSL</span> <span class=\"o\">::</span> <span class=\"kt\">DSL</span> <span class=\"nb\">()</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">IO</span> <span class=\"p\">(</span><span class=\"kt\">Int</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"kt\">Log</span><span class=\"p\">])</span>\n<span class=\"n\">runDSL</span> <span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"n\">fmap</span> <span class=\"kt\">D</span><span class=\"o\">.</span><span class=\"n\">toList</span> <span class=\"o\">&lt;$&gt;</span> <span class=\"n\">execRWST</span> <span class=\"p\">(</span><span class=\"n\">runDSL'</span> <span class=\"n\">m</span><span class=\"p\">)</span> <span class=\"nb\">()</span> <span class=\"mi\">0</span>\n</pre></div>\n</div>\n\n<h1>\n<span id=\"\u307e\u3068\u3081\" class=\"fragment\"></span><a href=\"#%E3%81%BE%E3%81%A8%E3%82%81\"><i class=\"fa fa-link\"></i></a>\u307e\u3068\u3081</h1>\n\n<ul>\n<li>\u7720\u3044\u3002</li>\n<li>\u66f8\u304d\u3084\u3059\u3055\u7684\u306b\u306fStacked &gt;= Operational &gt; Free &gt;&gt; Church &gt;&gt;&gt;&gt; Flat &gt;= CPS\u4f4d\u306b\u611f\u3058\u305f\u3002GeneralizedNewtypeDeriving\u5f37\u3044\u3002instance\u66f8\u304b\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u4e0b2\u3064\u306f\u7d50\u69cb\u3064\u3089\u3044\u3051\u3069\u6163\u308c\u308b\u3002</li>\n<li>\u597d\u304d\u306a\u306e\u3092\u4f7f\u304a\u3046\uff01\uff01\uff01\uff01</li>\n</ul>\n", "body": "\u30e2\u30ca\u30c9\u3068\u4e00\u53e3\u306b\u8a00\u3063\u3066\u3082\u5185\u90e8\u5b9f\u88c5\u8272\u3005\u3042\u308b\u306e\u3067\u3001\u540c\u3058\u6a5f\u80fd\u306e\u30e2\u30ca\u30c9\u3092\u8272\u3005\u306a\u66f8\u304d\u65b9\u3067\u66f8\u3044\u3066\u307f\u307e\u3059\u3002\n\n\u8981\u4ef6\n===\n\u3042\u307e\u308a\u8907\u96d1\u306b\u3057\u3066\u3082\u30a2\u30ec\u306a\u306e\u3067\u3001State,Writer\u3068IO\u306e\u5236\u7d04\u304f\u3089\u3044\u306b\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\n* \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306f`Functor`, `Applicative`, `Monad`\u306e\u307f\n* \u5185\u90e8\u306b`Int`\u3067`0`\u958b\u59cb\u306e\u30ab\u30a6\u30f3\u30bf\u3068\u3001`DList Log`\u3067\u8868\u73fe\u3055\u308c\u308b\u30ed\u30b0\u3092\u6301\u3064\n* `incr :: Int -> DSL ()`\u3067\u30ab\u30a6\u30f3\u30bf\u3092\u5897\u6e1b\u3057\u3001\u30ed\u30b0\u306b`I i`\u3092\u8ffd\u52a0\n* `reset :: DSL ()`\u3067\u30ab\u30a6\u30f3\u30bf\u30920\u306b\u623b\u3057\u3001\u30ed\u30b0\u306b`R`\u3092\u8ffd\u52a0\n* `current :: DSL ()`\u3067\u6a19\u6e96\u51fa\u529b\u306b\u73fe\u5728\u306e\u30ab\u30a6\u30f3\u30c8\u3092\u51fa\u529b\u3002\u6587\u8108\u5185\u3067\u305d\u308c\u4ee5\u5916\u306eIO\u306f\u4e0d\u53ef\u80fd\u3068\u3059\u308b\n* `runDSL :: DSL () -> IO (Int, [Log])`\u3067DSL\u3092\u5b9f\u884c\u3057\u3001\u6700\u5f8c\u306e\u30ab\u30a6\u30f3\u30bf\u306e\u5024\u3068\u30ed\u30b0\u3092\u8fd4\u3059\u3002\n\nLog\u30c7\u30fc\u30bf\u578b\u306f\u3053\u3093\u306a\u611f\u3058\u306b\u3057\u3066\u5171\u901a\u306b\u4f7f\u7528\u3057\u3001\n\n```Common.hs\nmodule Common (Log(..)) where\n\ndata Log = I Int | R\n\ninstance Show Log where\n    show (I i) = show i\n    show R     = \"RESET\"\n```\n\n\u4ee5\u4e0b\u306eMain.hs\u306e\u5b9f\u884c\u7d50\u679c\u306f\n\n```Main.hs\nimport XXX\n\nmain :: IO ()\nmain = (>>= print) $ runDSL $ do\n    incr 2\n    current\n    incr 5\n    incr 1\n    reset\n    incr 3\n    current\n```\n\n\u5168\u3066\n\n```out.sh\n2\n3\n(3,[2,5,1,RESET,3])\n```\n\n\u306b\u306a\u308b\u611f\u3058\u3067\u3059\u3002\n\nStacked\n===\n\u666e\u901a\u306b\u30e2\u30ca\u30c9\u5909\u63db\u5b50\u3092\u7a4d\u3093\u3067newtype\u3067\u5305\u3080\u6614\u306a\u304c\u3089\u306e\u65b9\u6cd5\n\u3082\u3061\u308d\u3093RWST\u3067\u3082OK\u3002\n\n```Stacked.hs\n{-# LANGUAGE GeneralizedNewtypeDeriving #-}\n\nmodule Stacked (DSL, runDSL, incr, reset, current) where\n\nimport Control.Applicative(Applicative)\nimport Control.Monad.IO.Class(liftIO)\nimport Control.Monad.Trans.Class(lift)\nimport Control.Monad.Trans.Writer\nimport Control.Monad.Trans.State\n\nimport Common\nimport Data.DList\n\nnewtype DSL a = DSL { unDSL :: StateT Int (WriterT (DList Log) IO) a }\n    deriving (Functor, Applicative, Monad)\n\nrunDSL :: DSL () -> IO (Int, [Log])\nrunDSL = fmap (fmap toList) . runWriterT . flip execStateT 0 . unDSL\n\nincr :: Int -> DSL ()\nincr i = DSL $ do\n    modify (+ i)\n    lift $ tell (singleton $ I i)\n\nreset :: DSL ()\nreset = DSL $ do\n    put 0\n    lift $ tell (singleton R)\n\ncurrent :: DSL ()\ncurrent = DSL $ get >>= liftIO . print\n```\n\nFlat\n===\n\u7a4d\u3093\u3067\u308b\u30e2\u30ca\u30c9\u5909\u63db\u5b50\u3092\u30d5\u30e9\u30c3\u30c8\u306b\u3002\u3061\u3087\u3063\u3068\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u306b\u554f\u984c\u304c\u51fa\u305f\u6642\u306a\u3069\u306b\u8a66\u3059\u3068\u826f\u3044\u304b\u3082\u3002\n\n```Flat.hs\nmodule Flat (DSL, runDSL, incr, reset, current) where\n\nimport Control.Applicative(Applicative(..), (<$>))\n\nimport Common\nimport Data.DList\n\nnewtype DSL a = DSL { unDSL :: Int -> IO (a, Int, DList Log) }\n\ninstance Functor DSL where\n    fmap f (DSL m) = DSL $ \\i -> do\n        (a, i', l) <- m i\n        return (f a, i', l)\n\ninstance Applicative DSL where\n    pure a = DSL $ \\i -> return (a, i, empty)\n    DSL mf <*> DSL ma = DSL $ \\i -> do\n        (f, i',  l)  <- mf i\n        (a, i'', l') <- ma i'\n        return (f a, i'', l `append` l')\n\ninstance Monad DSL where\n    return a = DSL $ \\i -> return (a, i, empty)\n    DSL m >>= f = DSL $ \\i -> do\n        (a, i',  l)  <- m i\n        -- \u4e2d\u306e\u6587\u8108(\u3053\u3053\u3067\u306fIO)\u3092\u610f\u8b58\u3057\u3066\u3001\n        (b, i'', l') <- unDSL (f a) i'\n        --                    ~~~~~ <- DSL b\u306a\u306e\u3067unDSL\u3057\u3066IO\u306e\u6587\u8108\u306b\n        return (b, i'', l `append` l')\n        -- \u5168\u90e8\u306e\u5909\u6570\u3092\u4f7f\u3044\u5207\u308b\u4e8b\u3092\u610f\u8b58\u3059\u308c\u3070\u66f8\u304d\u3084\u3059\u3044\u6c17\u304c\u3059\u308b\u3002\n\nrunDSL :: DSL () -> IO (Int, [Log])\nrunDSL m = (\\(_, i, l) -> (i, toList l)) <$> unDSL m 0\n\nincr :: Int -> DSL ()\nincr i = DSL $ \\c -> return ((), c + i, singleton $ I i)\n\nreset :: DSL ()\nreset = DSL $ \\_ -> return ((), 0, singleton R)\n\ncurrent :: DSL ()\ncurrent = DSL $ \\c -> print c >> return ((), c, empty)\n```\n\nCPS\n===\nCPS\u5909\u63db\u3002\u901f\u3044\u3068\u304b\u3044\u3046\u5642\u3002\u5b9f\u969b\u901f\u3044\u4e8b\u304c\u591a\u3044\u6c17\u304c\u3059\u308b\u3002\n\n```CPS.hs\n{-# LANGUAGE Rank2Types #-}\n\nmodule CPS (DSL, runDSL, incr, reset, current) where\n\nimport Control.Applicative(Applicative(..))\n\nimport Common\nimport Data.DList\n\nnewtype DSL a = DSL { unDSL :: forall r. Int -> (a -> Int -> DList Log -> IO r) -> IO r }\n--Reader\u3068\u304bState\u306e\u5165\u529b\u90e8\u5206\u3092\u307e\u305a\u4e26\u3079\u3066 -> ~~~    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n--                                              \u7d99\u7d9a\u90e8\u5206\u306fa\u3068Writer\u3068\u304bState\u306e\u51fa\u529b\u90e8\u5206\u3092\u3068\u308a\u3001\u5185\u90e8\u306e\u30e2\u30ca\u30c9(\u7121\u3051\u308c\u3070r\u3067ok)\u3092\u8fd4\u3059\u95a2\u6570\n\n\n-- \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306fStacked.hs\u3068\u305d\u3093\u306a\u306b\u5909\u3089\u306a\u3044\u3002\ninstance Functor DSL where\n    fmap f (DSL m) = DSL $ \\i cont -> m i (\\a i' l -> cont (f a) i' l)\n\ninstance Applicative DSL where\n    pure a = DSL $ \\i cont -> cont a i empty\n    DSL mf <*> DSL ma = DSL $ \\i cont -> mf i (\\f i' l -> ma i' (\\a i'' l' -> cont (f a) i'' (l `append` l')))\n\ninstance Monad DSL where\n    return a = DSL $ \\i cont -> cont a i empty\n    DSL m >>= f = DSL $ \\i cont -> m i (\\a i' l -> unDSL (f a) i' (\\b i'' l' -> cont b i'' (l `append` l')))\n\nrunDSL :: DSL () -> IO (Int, [Log])\nrunDSL m = unDSL m 0 (\\_ i l -> return (i, toList l))\n\nincr :: Int -> DSL ()\nincr i = DSL $ \\c cont -> cont () (i + c) (singleton $ I i)\n\nreset :: DSL ()\nreset = DSL $ \\_ cont -> cont () 0 (singleton R)\n\ncurrent :: DSL ()\ncurrent = DSL $ \\i cont -> print i >> cont () i empty\n```\n\nFree\n===\n\u3061\u3087\u3063\u3068\u524d\u6d41\u884c\u3063\u3066\u65e2\u306b\u5b9a\u7740\u3057\u305f\u611f\u3042\u308bFree\u30e2\u30ca\u30c9\u3002`run`\u3068`incr`\u7b49\u306e\u95a2\u6570\u304c\u72ec\u7acb\u3057\u3066\u308b\u306e\u3067\u3001\u7c21\u5358\u306b\u8907\u6570\u306e`run`(\u30c7\u30d0\u30c3\u30b0\u7528\u3068\u672c\u756a\u7528\u3068\u304b\u5206\u3051\u308b\u3068\u7f8e\u5473\u3057\u305d\u3046)\u3092\u4f5c\u308c\u308b\u306e\u304c\u826f\u3055\u305d\u3046\u306a\u6c17\u304c\u3059\u308b\u3002\n\n\u5b9a\u756a\u3063\u307d\u3044[free](http://hackage.haskell.org/package/free)\u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u4f7f\u7528\n\n```Free.hs\n{-# LANGUAGE DeriveFunctor #-}\nmodule Free (DSL, runDSL, incr, reset, current) where\n\nimport Control.Monad.Free\n\nimport Common\nimport Data.Monoid\nimport Data.DList\n\ndata DSLF a\n    = Incr Int a\n    | Reset a\n    | Current a\n    deriving(Functor, Show)\n\ntype DSL = Free DSLF\n\nincr :: Int -> DSL ()\nincr i = liftF $ Incr i ()\n\nreset :: DSL ()\nreset = liftF $ Reset ()\n\ncurrent :: DSL ()\ncurrent = liftF $ Current ()\n\nrunDSL' :: Int -> DList Log -> DSL () -> IO (Int, [Log])\nrunDSL' c l (Pure _)           = return (c, toList l)\nrunDSL' c l (Free (Incr i  n)) = runDSL' (c + i) (l <> singleton (I i)) n\nrunDSL' _ l (Free (Reset   n)) = runDSL' 0       (l <> singleton R)     n\nrunDSL' c l (Free (Current n)) = print c >> runDSL' c l n\n\nrunDSL :: DSL () -> IO (Int, [Log])\nrunDSL = runDSL' 0 mempty\n```\n\n\u3042\u3068\u3001`Show`\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u4ed8\u3051\u3066\u304a\u304f\u3060\u3051\u3067\u3001\u69cb\u6587\u6728\u3092dump\u51fa\u6765\u308b\u306e\u3082\u826f\u3044\u611f\u3058\u3063\u307d\u3044\u3002\n\n`Main.hs`\u306e\u3092dump\u3059\u308b\u3068\u3053\u3093\u306a\u611f\u3058\n\n```\nFree (Incr 2 (Free (Current (Free (Incr 5 (Free (Incr 1 (Free (Reset (Free (Incr 3 (Free (Current (Pure ()))))))))))))))\n```\n\nChurch\n===\nfree\u306eChurch\u30e2\u30b8\u30e5\u30fc\u30eb\u3002\u901f\u3044\u3063\u3066\u66f8\u3044\u3066\u308b\u3002\n\n```Church.hs\n{-# LANGUAGE DeriveFunctor #-}\nmodule Church (DSL, runDSL, incr, reset, current) where\n\nimport Control.Applicative\nimport Control.Monad.IO.Class\nimport Control.Monad.Trans.RWS.Strict\nimport Control.Monad.Free.Church\n\nimport Common\nimport Data.DList\n\ndata DSLF a\n    = Incr Int a\n    | Reset a\n    | Current a\n    deriving(Functor, Show)\n\ntype DSL = F DSLF\n\nincr :: Int -> DSL ()\nincr i = liftF $ Incr i ()\n\nreset :: DSL ()\nreset = liftF $ Reset ()\n\ncurrent :: DSL ()\ncurrent = liftF $ Current ()\n\nrunDSL' :: DSL a -> RWST () (DList Log) Int IO a\nrunDSL' = foldF advent\n  where\n    advent (Incr i  n) = modify (+ i) >> tell (singleton $ I i) >> return n\n    advent (Reset   n) = put 0 >> tell (singleton R) >> return n\n    advent (Current n) = get >>= liftIO . print >> return n\n\nrunDSL :: DSL () -> IO (Int, [Log])\nrunDSL m = fmap toList <$> execRWST (runDSL' m) () 0\n```\n\nOperational\n===\n\u7c73\u7530\u306e\u306a\u3093\u3068\u304b\u304c\u304b\u3093\u3068\u304b\u3067Functor\u3082\u8981\u3089\u306a\u3044\u3068\u304b\u306a\u3093\u3068\u304b\u3067\u3059\u3054\u3044\u3002\u3059\u3054\u3044\u3002\n\n[minioperational](http://hackage.haskell.org/package/minioperational)\u4f7f\u7528\n\n```Operational.hs\n{-# LANGUAGE DeriveFunctor #-}\n{-# LANGUAGE GADTs #-}\n\nmodule Operational (DSL, runDSL, incr, reset, current) where\n\nimport Control.Applicative\nimport Control.Monad.IO.Class\nimport Control.Monad.Trans.RWS.Strict\nimport Control.Monad.Operational.Mini\n\nimport Common\nimport qualified Data.DList as D\n\ndata DSLF a where\n    Incr :: Int -> DSLF ()\n    Reset :: DSLF ()\n    Current :: DSLF ()\n\ntype DSL = Program DSLF\n\nincr :: Int -> DSL ()\nincr = singleton . Incr\n\nreset :: DSL ()\nreset = singleton Reset\n\ncurrent :: DSL ()\ncurrent = singleton Current\n\nrunDSL' :: DSL a -> RWST () (D.DList Log) Int IO a\nrunDSL' = interpret advent\n  where\n    advent :: DSLF a -> RWST () (D.DList Log) Int IO a\n    advent (Incr i) = modify (+ i) >> tell (D.singleton $ I i)\n    advent Reset    = put 0 >> tell (D.singleton R)\n    advent Current  = get >>= liftIO . print\n\nrunDSL :: DSL () -> IO (Int, [Log])\nrunDSL m = fmap D.toList <$> execRWST (runDSL' m) () 0\n```\n\n\u307e\u3068\u3081\n===\n* \u7720\u3044\u3002\n* \u66f8\u304d\u3084\u3059\u3055\u7684\u306b\u306fStacked >= Operational > Free >> Church >>>> Flat >= CPS\u4f4d\u306b\u611f\u3058\u305f\u3002GeneralizedNewtypeDeriving\u5f37\u3044\u3002instance\u66f8\u304b\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u4e0b2\u3064\u306f\u7d50\u69cb\u3064\u3089\u3044\u3051\u3069\u6163\u308c\u308b\u3002\n* \u597d\u304d\u306a\u306e\u3092\u4f7f\u304a\u3046\uff01\uff01\uff01\uff01\n", "coediting": false, "comments_count": 0, "created_at": "2015-03-23T00:13:00+09:00", "group": null, "id": "6c202200e266548275ea", "likes_count": 51, "private": false, "reactions_count": 0, "tags": [{"name": "Haskell", "versions": []}, {"name": "ghc", "versions": ["7.8.3"]}], "title": "\u30e2\u30ca\u30c9\u306e\u5b9f\u88c5\u3044\u308d\u3044\u308d", "updated_at": "2015-03-25T02:26:33+09:00", "url": "https://qiita.com/philopon/items/6c202200e266548275ea", "user": {"description": "", "facebook_id": "", "followees_count": 4, "followers_count": 48, "github_login_name": null, "id": "philopon", "items_count": 30, "linkedin_id": "", "location": "", "name": "", "organization": "", "permanent_id": 33562, "profile_image_url": "https://qiita-image-store.s3.amazonaws.com/0/33562/profile-images/1473686152", "team_only": false, "twitter_screen_name": null, "website_url": "http://philopon.github.io"}, "page_views_count": null}