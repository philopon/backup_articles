{"rendered_body": "\n<h1>\n<span id=\"\u3084\u308a\u305f\u3044\u3053\u3068\" class=\"fragment\"></span><a href=\"#%E3%82%84%E3%82%8A%E3%81%9F%E3%81%84%E3%81%93%E3%81%A8\"><i class=\"fa fa-link\"></i></a>\u3084\u308a\u305f\u3044\u3053\u3068</h1>\n\n<p>\u8f9e\u66f8\u5185\u306b\u5f53\u8a72\u306e\u30ad\u30fc\u304c\u3042\u308b\u5834\u5408\u306e\u307f\u30b3\u30f3\u30d1\u30a4\u30eb\u3092\u901a\u904e\u3059\u308blookup</p>\n\n<div class=\"code-frame\" data-lang=\"haskell\">\n<div class=\"code-lang\"><span class=\"bold\">\u64ec\u4f3c\u30b3\u30fc\u30c9</span></div>\n<div class=\"highlight\"><pre><span class=\"n\">dict</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"kt\">Elem</span> <span class=\"mi\">222</span> <span class=\"o\">::</span> <span class=\"kt\">Elem</span> <span class=\"s\">\"cat\"</span> <span class=\"kt\">Int</span><span class=\"p\">)</span>\n    <span class=\"p\">`</span><span class=\"kt\">Ins</span><span class=\"p\">`</span> <span class=\"p\">(</span><span class=\"kt\">Elem</span> <span class=\"s\">\"bowwow\"</span> <span class=\"o\">::</span> <span class=\"kt\">Elem</span> <span class=\"s\">\"dog\"</span> <span class=\"kt\">String</span><span class=\"p\">)</span>\n    <span class=\"p\">`</span><span class=\"kt\">Ins</span><span class=\"p\">`</span> <span class=\"kt\">Emty</span>\n\n<span class=\"c1\">-- dlookup (Proxy :: Proxy \"dog\") dict == \"bowwow\"</span>\n<span class=\"c1\">-- dlookup (Proxy :: Proxy \"cat\") dict == 222</span>\n<span class=\"c1\">-- dlookup (Proxy :: Proxy \"xxx\") dict -- \u578b\u30a8\u30e9\u30fc</span>\n</pre></div>\n</div>\n\n<h1>\n<span id=\"\u30b3\u30fc\u30c9\" class=\"fragment\"></span><a href=\"#%E3%82%B3%E3%83%BC%E3%83%89\"><i class=\"fa fa-link\"></i></a>\u30b3\u30fc\u30c9</h1>\n\n<p>ghc-7.8\u4ee5\u964d\u5fc5\u9808</p>\n\n<p>gist: <a href=\"https://gist.github.com/philopon/a66d5814f1eef470aeef\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://gist.github.com/philopon/a66d5814f1eef470aeef</a></p>\n\n<div class=\"code-frame\" data-lang=\"haskell\"><div class=\"highlight\"><pre><span class=\"cp\">{-# LANGUAGE DataKinds #-}</span>\n<span class=\"cp\">{-# LANGUAGE PolyKinds #-}</span>\n<span class=\"cp\">{-# LANGUAGE KindSignatures #-}</span>\n<span class=\"cp\">{-# LANGUAGE TypeOperators #-}</span>\n<span class=\"cp\">{-# LANGUAGE GADTs #-}</span>\n<span class=\"cp\">{-# LANGUAGE TypeFamilies #-}</span>\n<span class=\"cp\">{-# LANGUAGE UndecidableInstances #-}</span>\n<span class=\"cp\">{-# LANGUAGE ScopedTypeVariables #-}</span>\n\n<span class=\"kr\">import</span> <span class=\"nn\">GHC.TypeLits</span>\n<span class=\"kr\">import</span> <span class=\"nn\">Data.Proxy</span>\n<span class=\"kr\">import</span> <span class=\"nn\">Data.Type.Equality</span>\n<span class=\"kr\">import</span> <span class=\"nn\">Unsafe.Coerce</span>\n\n<span class=\"kr\">data</span> <span class=\"kt\">Dict</span> <span class=\"p\">(</span><span class=\"n\">ks</span> <span class=\"o\">::</span> <span class=\"p\">[(</span><span class=\"kt\">Symbol</span><span class=\"p\">,</span><span class=\"o\">*</span><span class=\"p\">)])</span> <span class=\"kr\">where</span>\n    <span class=\"kt\">Empty</span> <span class=\"o\">::</span> <span class=\"kt\">Dict</span> <span class=\"sc\">'[</span><span class=\"err\">]</span>\n    <span class=\"kt\">Ins</span>   <span class=\"o\">::</span> <span class=\"kt\">KnownSymbol</span> <span class=\"n\">k</span> <span class=\"o\">=&gt;</span> <span class=\"kt\">Elem</span> <span class=\"n\">k</span> <span class=\"n\">t</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">Dict</span> <span class=\"n\">ks</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">Dict</span> <span class=\"p\">(</span><span class=\"sc\">'(</span><span class=\"err\">k</span><span class=\"p\">,</span><span class=\"n\">t</span><span class=\"p\">)</span> <span class=\"sc\">':</span><span class=\"err\"> </span><span class=\"n\">ks</span><span class=\"p\">)</span>\n\n<span class=\"kr\">data</span> <span class=\"kt\">Elem</span> <span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"kt\">Symbol</span><span class=\"p\">)</span> <span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"kt\">Elem</span> <span class=\"n\">t</span>\n\n<span class=\"kr\">type</span> <span class=\"n\">family</span> <span class=\"kt\">Or</span> <span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"kt\">Bool</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">b</span> <span class=\"o\">::</span> <span class=\"kt\">Bool</span><span class=\"p\">)</span> <span class=\"o\">::</span> <span class=\"kt\">Bool</span> <span class=\"kr\">where</span>\n    <span class=\"kt\">Or</span> <span class=\"kt\">False</span> <span class=\"kt\">False</span> <span class=\"o\">=</span> <span class=\"kt\">False</span>\n    <span class=\"kt\">Or</span> <span class=\"n\">a</span>     <span class=\"n\">b</span>     <span class=\"o\">=</span> <span class=\"kt\">True</span>\n\n<span class=\"kr\">type</span> <span class=\"n\">family</span> <span class=\"kt\">Fst</span> <span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">l</span><span class=\"p\">))</span> <span class=\"o\">::</span> <span class=\"n\">k</span>\n<span class=\"kr\">type</span> <span class=\"kr\">instance</span> <span class=\"kt\">Fst</span> <span class=\"sc\">'(</span><span class=\"err\">k</span><span class=\"p\">,</span> <span class=\"n\">l</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">k</span>\n\n<span class=\"kr\">type</span> <span class=\"n\">family</span> <span class=\"kt\">HasKey</span> <span class=\"p\">(</span><span class=\"n\">k</span> <span class=\"o\">::</span> <span class=\"kt\">Symbol</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">ks</span> <span class=\"o\">::</span> <span class=\"p\">[(</span><span class=\"kt\">Symbol</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"p\">)])</span> <span class=\"o\">::</span> <span class=\"kt\">Bool</span>\n<span class=\"kr\">type</span> <span class=\"kr\">instance</span> <span class=\"kt\">HasKey</span> <span class=\"n\">k</span> <span class=\"sc\">'[</span><span class=\"err\">]</span> <span class=\"o\">=</span> <span class=\"kt\">'False</span>\n<span class=\"kr\">type</span> <span class=\"kr\">instance</span> <span class=\"kt\">HasKey</span> <span class=\"n\">k</span> <span class=\"p\">(</span><span class=\"n\">e</span> <span class=\"sc\">':</span><span class=\"err\"> </span><span class=\"n\">ks</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"kt\">Or</span> <span class=\"p\">(</span><span class=\"n\">k</span> <span class=\"o\">==</span> <span class=\"kt\">Fst</span> <span class=\"n\">e</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"kt\">HasKey</span> <span class=\"n\">k</span> <span class=\"n\">ks</span><span class=\"p\">)</span>\n\n<span class=\"kr\">type</span> <span class=\"n\">family</span> <span class=\"kt\">If</span> <span class=\"p\">(</span><span class=\"n\">b</span> <span class=\"o\">::</span> <span class=\"kt\">Bool</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">t</span> <span class=\"o\">::</span> <span class=\"n\">k</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">f</span> <span class=\"o\">::</span> <span class=\"n\">k</span><span class=\"p\">)</span> <span class=\"o\">::</span> <span class=\"n\">k</span>\n<span class=\"kr\">type</span> <span class=\"kr\">instance</span> <span class=\"kt\">If</span> <span class=\"kt\">'True</span>  <span class=\"n\">t</span> <span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"n\">t</span>\n<span class=\"kr\">type</span> <span class=\"kr\">instance</span> <span class=\"kt\">If</span> <span class=\"kt\">'False</span> <span class=\"n\">t</span> <span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"n\">f</span>\n\n<span class=\"kr\">type</span> <span class=\"n\">family</span> <span class=\"kt\">Value</span> <span class=\"p\">(</span><span class=\"n\">k</span> <span class=\"o\">::</span> <span class=\"kt\">Symbol</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">ks</span> <span class=\"o\">::</span> <span class=\"p\">[(</span><span class=\"kt\">Symbol</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"p\">)])</span> <span class=\"o\">::</span> <span class=\"o\">*</span>\n<span class=\"kr\">type</span> <span class=\"kr\">instance</span> <span class=\"kt\">Value</span> <span class=\"n\">k</span> <span class=\"p\">(</span><span class=\"sc\">'(</span><span class=\"err\">l</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"sc\">':</span><span class=\"err\"> </span><span class=\"n\">ks</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"kt\">If</span> <span class=\"p\">(</span><span class=\"n\">k</span> <span class=\"o\">==</span> <span class=\"n\">l</span><span class=\"p\">)</span> <span class=\"n\">v</span> <span class=\"p\">(</span><span class=\"kt\">Value</span> <span class=\"n\">k</span> <span class=\"n\">ks</span><span class=\"p\">)</span>\n\n<span class=\"kr\">data</span> <span class=\"kt\">W</span> <span class=\"o\">=</span> <span class=\"n\">forall</span> <span class=\"n\">a</span><span class=\"o\">.</span> <span class=\"kt\">W</span> <span class=\"n\">a</span>\n\n<span class=\"n\">sdictToDict</span> <span class=\"o\">::</span> <span class=\"kt\">Dict</span> <span class=\"n\">ks</span> <span class=\"o\">-&gt;</span> <span class=\"p\">[(</span><span class=\"kt\">String</span><span class=\"p\">,</span> <span class=\"kt\">W</span><span class=\"p\">)]</span>\n<span class=\"n\">sdictToDict</span> <span class=\"kt\">Empty</span> <span class=\"o\">=</span> <span class=\"kt\">[]</span>\n<span class=\"n\">sdictToDict</span> <span class=\"p\">((</span><span class=\"kt\">Elem</span> <span class=\"n\">v</span> <span class=\"o\">::</span> <span class=\"kt\">Elem</span> <span class=\"n\">k</span> <span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"p\">`</span><span class=\"kt\">Ins</span><span class=\"p\">`</span> <span class=\"n\">l</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">symbolVal</span> <span class=\"p\">(</span><span class=\"kt\">Proxy</span> <span class=\"o\">::</span> <span class=\"kt\">Proxy</span> <span class=\"n\">k</span><span class=\"p\">),</span> <span class=\"kt\">W</span> <span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"o\">:</span> <span class=\"n\">sdictToDict</span> <span class=\"n\">l</span>\n\n<span class=\"n\">dLookup</span> <span class=\"o\">::</span> <span class=\"n\">forall</span> <span class=\"n\">k</span> <span class=\"n\">ks</span><span class=\"o\">.</span> <span class=\"p\">(</span><span class=\"kt\">HasKey</span> <span class=\"n\">k</span> <span class=\"n\">ks</span> <span class=\"o\">~</span> <span class=\"kt\">True</span><span class=\"p\">,</span> <span class=\"kt\">KnownSymbol</span> <span class=\"n\">k</span><span class=\"p\">)</span>\n        <span class=\"o\">=&gt;</span> <span class=\"kt\">Proxy</span> <span class=\"p\">(</span><span class=\"n\">k</span> <span class=\"o\">::</span> <span class=\"kt\">Symbol</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">Dict</span> <span class=\"n\">ks</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">Value</span> <span class=\"n\">k</span> <span class=\"n\">ks</span>\n<span class=\"n\">dLookup</span> <span class=\"kr\">_</span> <span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"kr\">case</span> <span class=\"n\">maybe</span> <span class=\"n\">undefined</span> <span class=\"n\">id</span> <span class=\"o\">.</span> <span class=\"n\">lookup</span> <span class=\"p\">(</span><span class=\"n\">symbolVal</span> <span class=\"p\">(</span><span class=\"kt\">Proxy</span> <span class=\"o\">::</span> <span class=\"kt\">Proxy</span> <span class=\"n\">k</span><span class=\"p\">))</span> <span class=\"o\">$</span> <span class=\"n\">sdictToDict</span> <span class=\"n\">d</span> <span class=\"kr\">of</span>\n    <span class=\"kt\">W</span> <span class=\"n\">a</span> <span class=\"o\">-&gt;</span> <span class=\"n\">unsafeCoerce</span> <span class=\"n\">a</span>\n\n<span class=\"n\">dict</span> <span class=\"o\">::</span> <span class=\"kt\">Dict</span> <span class=\"p\">[</span><span class=\"sc\">'(</span><span class=\"err\">\"</span><span class=\"n\">dog</span><span class=\"s\">\", String), '(\"</span><span class=\"n\">cat</span><span class=\"s\">\", Int)]\ndict = \n    Ins (Elem \"</span><span class=\"n\">bowwow</span><span class=\"s\">\" :: Elem \"</span><span class=\"n\">dog</span><span class=\"s\">\" String) $\n    Ins (Elem 222      :: Elem \"</span><span class=\"n\">cat</span><span class=\"s\">\" Int) $ \n    Empty\n</span></pre></div></div>\n\n<div class=\"code-frame\" data-lang=\"haskell\">\n<div class=\"code-lang\"><span class=\"bold\">ghci</span></div>\n<div class=\"highlight\"><pre><span class=\"o\">&gt;</span> <span class=\"o\">:</span><span class=\"n\">set</span> <span class=\"o\">-</span><span class=\"kt\">XDataKinds</span>\n<span class=\"o\">&gt;</span> <span class=\"n\">dLookup</span> <span class=\"p\">(</span><span class=\"kt\">Proxy</span> <span class=\"o\">::</span> <span class=\"kt\">Proxy</span> <span class=\"s\">\"dog\"</span><span class=\"p\">)</span> <span class=\"n\">dict</span>\n<span class=\"s\">\"bowwow\"</span> <span class=\"c1\">-- String</span>\n<span class=\"o\">&gt;</span> <span class=\"n\">dLookup</span> <span class=\"p\">(</span><span class=\"kt\">Proxy</span> <span class=\"o\">::</span> <span class=\"kt\">Proxy</span> <span class=\"s\">\"cat\"</span><span class=\"p\">)</span> <span class=\"n\">dict</span>\n<span class=\"mi\">222</span>\n<span class=\"o\">&gt;</span> <span class=\"n\">dLookup</span> <span class=\"p\">(</span><span class=\"kt\">Proxy</span> <span class=\"o\">::</span> <span class=\"kt\">Proxy</span> <span class=\"s\">\"xxx\"</span><span class=\"p\">)</span> <span class=\"n\">dict</span>\n\n<span class=\"o\">&lt;</span><span class=\"n\">interactive</span><span class=\"o\">&gt;:</span><span class=\"mi\">10</span><span class=\"o\">:</span><span class=\"mi\">1</span><span class=\"o\">:</span>\n    <span class=\"kt\">Couldn't</span> <span class=\"n\">match</span> <span class=\"kr\">type</span> <span class=\"err\">\u2018</span><span class=\"kt\">'False</span><span class=\"err\">\u2019</span> <span class=\"n\">with</span> <span class=\"err\">\u2018</span><span class=\"kt\">'True</span><span class=\"err\">\u2019</span>\n    <span class=\"kt\">Expected</span> <span class=\"kr\">type</span><span class=\"o\">:</span> <span class=\"kt\">'True</span>\n      <span class=\"kt\">Actual</span> <span class=\"kr\">type</span><span class=\"o\">:</span> <span class=\"kt\">HasKey</span> <span class=\"s\">\"xxx\"</span> <span class=\"sc\">'['</span><span class=\"p\">(</span><span class=\"s\">\"dog\"</span><span class=\"p\">,</span> <span class=\"kt\">String</span><span class=\"p\">),</span> <span class=\"sc\">'(</span><span class=\"err\">\"</span><span class=\"n\">cat</span><span class=\"s\">\", Int)]\n    In the expression: dLookup (Proxy :: Proxy \"</span><span class=\"n\">xxx</span><span class=\"s\">\") dict\n    In an equation for \u2018it\u2019: it = dLookup (Proxy :: Proxy \"</span><span class=\"n\">xxx</span><span class=\"s\">\") dict\n</span></pre></div>\n</div>\n\n<h1>\n<span id=\"\u6240\u611f\" class=\"fragment\"></span><a href=\"#%E6%89%80%E6%84%9F\"><i class=\"fa fa-link\"></i></a>\u6240\u611f</h1>\n\n<ul>\n<li>\u4e00\u5fdc\u52d5\u3044\u3066\u308b\u3063\u307d\u3044\u304c\u2026\u2026</li>\n<li>\u3053\u308c\u3067\u3044\u3044\u306e\u304b</li>\n<li>\u3082\u3063\u3068\u7dba\u9e97\u306b\u66f8\u304d\u305f\u3044</li>\n</ul>\n\n<h1>\n<span id=\"\u8ffd\u8a18\" class=\"fragment\"></span><a href=\"#%E8%BF%BD%E8%A8%98\"><i class=\"fa fa-link\"></i></a>\u8ffd\u8a18</h1>\n\n<p>\u578b\u30af\u30e9\u30b9\u3067\u3082\u3063\u3068\u30b7\u30f3\u30d7\u30eb\u306b\u66f8\u3051\u305f\u3002<br>\nMember\u306fextensible-effects\u306e\u307b\u307c\u4e38\u5199\u3057\u3002</p>\n\n<p>ghc-7.8\u4ee5\u964d\u5fc5\u9808</p>\n\n<div class=\"code-frame\" data-lang=\"haskell\"><div class=\"highlight\"><pre><span class=\"cp\">{-# LANGUAGE DataKinds #-}</span>\n<span class=\"cp\">{-# LANGUAGE TypeOperators #-}</span>\n<span class=\"cp\">{-# LANGUAGE GADTs #-}</span>\n<span class=\"cp\">{-# LANGUAGE TypeFamilies #-}</span>\n<span class=\"cp\">{-# LANGUAGE MultiParamTypeClasses #-}</span>\n<span class=\"cp\">{-# LANGUAGE FlexibleInstances #-}</span>\n<span class=\"cp\">{-# LANGUAGE OverlappingInstances #-}</span>\n\n<span class=\"kr\">import</span> <span class=\"nn\">GHC.TypeLits</span>\n<span class=\"kr\">import</span> <span class=\"nn\">Data.Proxy</span>\n<span class=\"kr\">import</span> <span class=\"nn\">Unsafe.Coerce</span>\n\n<span class=\"kr\">data</span> <span class=\"kt\">Dict</span> <span class=\"p\">(</span><span class=\"n\">ks</span> <span class=\"o\">::</span> <span class=\"p\">[(</span><span class=\"kt\">Symbol</span><span class=\"p\">,</span><span class=\"o\">*</span><span class=\"p\">)])</span> <span class=\"kr\">where</span>\n    <span class=\"kt\">Empty</span> <span class=\"o\">::</span> <span class=\"kt\">Dict</span> <span class=\"sc\">'[</span><span class=\"err\">]</span>\n    <span class=\"kt\">Ins</span>   <span class=\"o\">::</span> <span class=\"kt\">KnownSymbol</span> <span class=\"n\">k</span> <span class=\"o\">=&gt;</span> <span class=\"kt\">Elem</span> <span class=\"n\">k</span> <span class=\"n\">t</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">Dict</span> <span class=\"n\">ks</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">Dict</span> <span class=\"p\">(</span><span class=\"sc\">'(</span><span class=\"err\">k</span><span class=\"p\">,</span><span class=\"n\">t</span><span class=\"p\">)</span> <span class=\"sc\">':</span><span class=\"err\"> </span><span class=\"n\">ks</span><span class=\"p\">)</span>\n\n<span class=\"kr\">data</span> <span class=\"kt\">Elem</span> <span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"kt\">Symbol</span><span class=\"p\">)</span> <span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"kt\">Elem</span> <span class=\"n\">t</span>\n\n<span class=\"kr\">type</span> <span class=\"n\">family</span> <span class=\"kt\">Lookup</span> <span class=\"p\">(</span><span class=\"n\">key</span> <span class=\"o\">::</span> <span class=\"kt\">Symbol</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">ks</span> <span class=\"o\">::</span> <span class=\"p\">[(</span><span class=\"kt\">Symbol</span><span class=\"p\">,</span><span class=\"o\">*</span><span class=\"p\">)])</span> <span class=\"kr\">where</span>\n  <span class=\"kt\">Lookup</span> <span class=\"n\">key</span> <span class=\"p\">(</span><span class=\"sc\">'(</span><span class=\"err\">k</span><span class=\"n\">ey</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"sc\">':</span><span class=\"err\"> </span><span class=\"n\">ks</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">v</span>\n  <span class=\"kt\">Lookup</span> <span class=\"n\">key</span> <span class=\"p\">(</span><span class=\"sc\">'(</span><span class=\"err\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"sc\">':</span><span class=\"err\"> </span><span class=\"n\">ks</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"kt\">Lookup</span> <span class=\"n\">key</span> <span class=\"n\">ks</span>\n\n<span class=\"kr\">class</span> <span class=\"kt\">Member</span> <span class=\"p\">(</span><span class=\"n\">key</span> <span class=\"o\">::</span> <span class=\"kt\">Symbol</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">ks</span> <span class=\"o\">::</span> <span class=\"p\">[(</span><span class=\"kt\">Symbol</span><span class=\"p\">,</span><span class=\"o\">*</span><span class=\"p\">)])</span> <span class=\"kr\">where</span>\n  <span class=\"n\">dLookup</span> <span class=\"o\">::</span> <span class=\"kt\">Proxy</span> <span class=\"n\">key</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">Dict</span> <span class=\"n\">ks</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">Lookup</span> <span class=\"n\">key</span> <span class=\"n\">ks</span>\n\n<span class=\"c1\">-- key\u304c\u30de\u30c3\u30c1\u3057\u305f\u3068\u304d</span>\n<span class=\"kr\">instance</span> <span class=\"kt\">Member</span> <span class=\"n\">key</span> <span class=\"p\">(</span><span class=\"sc\">'(</span><span class=\"err\">k</span><span class=\"n\">ey</span><span class=\"p\">,</span><span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"sc\">':</span><span class=\"err\"> </span><span class=\"n\">d</span><span class=\"p\">)</span> <span class=\"kr\">where</span>\n    <span class=\"n\">dLookup</span> <span class=\"kr\">_</span> <span class=\"p\">(</span><span class=\"kt\">Elem</span> <span class=\"n\">v</span> <span class=\"p\">`</span><span class=\"kt\">Ins</span><span class=\"p\">`</span> <span class=\"kr\">_</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">v</span>\n\n<span class=\"c1\">-- \u30de\u30c3\u30c1\u3057\u306a\u3044\u3068\u304d</span>\n<span class=\"kr\">instance</span> <span class=\"kt\">Member</span> <span class=\"n\">key</span> <span class=\"n\">d</span> <span class=\"o\">=&gt;</span> <span class=\"kt\">Member</span> <span class=\"n\">key</span> <span class=\"p\">(</span><span class=\"sc\">'(</span><span class=\"err\">k</span><span class=\"n\">ey'</span><span class=\"p\">,</span><span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"sc\">':</span><span class=\"err\"> </span><span class=\"n\">d</span><span class=\"p\">)</span> <span class=\"kr\">where</span>\n    <span class=\"n\">dLookup</span> <span class=\"n\">p</span> <span class=\"p\">(</span><span class=\"kr\">_</span> <span class=\"p\">`</span><span class=\"kt\">Ins</span><span class=\"p\">`</span> <span class=\"n\">ks</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">unsafeCoerce</span> <span class=\"o\">$</span> <span class=\"n\">dLookup</span> <span class=\"n\">p</span> <span class=\"n\">ks</span>\n\n<span class=\"n\">dict</span> <span class=\"o\">::</span> <span class=\"kt\">Dict</span> <span class=\"p\">[</span><span class=\"sc\">'(</span><span class=\"err\">\"</span><span class=\"n\">dog</span><span class=\"s\">\", String), '(\"</span><span class=\"n\">cat</span><span class=\"s\">\", Int)]\ndict = \n    Ins (Elem \"</span><span class=\"n\">bowwow</span><span class=\"s\">\" :: Elem \"</span><span class=\"n\">dog</span><span class=\"s\">\" String) $\n    Ins (Elem 222      :: Elem \"</span><span class=\"n\">cat</span><span class=\"s\">\" Int) $ \n    Empty\n</span></pre></div></div>\n\n<div class=\"code-frame\" data-lang=\"haskell\">\n<div class=\"code-lang\"><span class=\"bold\">ghci</span></div>\n<div class=\"highlight\"><pre><span class=\"o\">&gt;</span> <span class=\"n\">dLookup</span>  <span class=\"p\">(</span><span class=\"kt\">Proxy</span> <span class=\"o\">::</span> <span class=\"kt\">Proxy</span> <span class=\"s\">\"dog\"</span><span class=\"p\">)</span> <span class=\"n\">dict</span>\n<span class=\"s\">\"bowwow\"</span>\n<span class=\"o\">&gt;</span> <span class=\"n\">dLookup</span>  <span class=\"p\">(</span><span class=\"kt\">Proxy</span> <span class=\"o\">::</span> <span class=\"kt\">Proxy</span> <span class=\"s\">\"cat\"</span><span class=\"p\">)</span> <span class=\"n\">dict</span>\n<span class=\"mi\">222</span>\n<span class=\"o\">&gt;</span> <span class=\"n\">dLookup</span>  <span class=\"p\">(</span><span class=\"kt\">Proxy</span> <span class=\"o\">::</span> <span class=\"kt\">Proxy</span> <span class=\"s\">\"c\"</span><span class=\"p\">)</span> <span class=\"n\">dict</span>\n\n<span class=\"o\">&lt;</span><span class=\"n\">interactive</span><span class=\"o\">&gt;:</span><span class=\"mi\">31</span><span class=\"o\">:</span><span class=\"mi\">1</span><span class=\"o\">:</span>\n    <span class=\"kt\">No</span> <span class=\"kr\">instance</span> <span class=\"n\">for</span> <span class=\"p\">(</span><span class=\"kt\">Member</span> <span class=\"s\">\"c\"</span> <span class=\"sc\">'[</span><span class=\"err\">]</span><span class=\"p\">)</span> <span class=\"n\">arising</span> <span class=\"n\">from</span> <span class=\"n\">a</span> <span class=\"n\">use</span> <span class=\"kr\">of</span> <span class=\"err\">\u2018</span><span class=\"n\">dLookup</span><span class=\"err\">\u2019</span>\n    <span class=\"kt\">In</span> <span class=\"n\">the</span> <span class=\"n\">expression</span><span class=\"o\">:</span> <span class=\"n\">dLookup</span> <span class=\"p\">(</span><span class=\"kt\">Proxy</span> <span class=\"o\">::</span> <span class=\"kt\">Proxy</span> <span class=\"s\">\"c\"</span><span class=\"p\">)</span> <span class=\"n\">dict</span>\n    <span class=\"kt\">In</span> <span class=\"n\">an</span> <span class=\"n\">equation</span> <span class=\"n\">for</span> <span class=\"err\">\u2018</span><span class=\"n\">it</span><span class=\"err\">\u2019</span><span class=\"o\">:</span> <span class=\"n\">it</span> <span class=\"o\">=</span> <span class=\"n\">dLookup</span> <span class=\"p\">(</span><span class=\"kt\">Proxy</span> <span class=\"o\">::</span> <span class=\"kt\">Proxy</span> <span class=\"s\">\"c\"</span><span class=\"p\">)</span> <span class=\"n\">dict</span>\n</pre></div>\n</div>\n\n<h1>\n<span id=\"\u6240\u611f2\" class=\"fragment\"></span><a href=\"#%E6%89%80%E6%84%9F2\"><i class=\"fa fa-link\"></i></a>\u6240\u611f2</h1>\n\n<ul>\n<li>\u578b\u30af\u30e9\u30b9\u3068\u578b\u65cf\u306e\u4f7f\u3044\u5206\u3051\u304c\u30a4\u30de\u30a4\u30c1\u3064\u304b\u3081\u306a\u3044\u611f\u3058\u3002</li>\n<li>Any\u306a\u5236\u7d04\u3092\u66f8\u304f\u5fc5\u8981\u304c\u6709\u308b\u5834\u5408\u306f\u578b\u30af\u30e9\u30b9\u306e\u304c\u826f\u3044\u3063\u307d\u3044\uff1f</li>\n<li>(\u305f\u3076\u3093)\u578b\u304c\u5408\u308f\u306a\u3044\u306e\u3067unsafeCoerce\u4f7f\u3063\u305f\u3051\u3069\u3001\u3082\u3057\u304b\u3057\u305f\u3089\u5408\u3046\u306e\u304b\u3082\uff1f</li>\n</ul>\n\n<h1>\n<span id=\"\u3055\u3089\u306b\u8ffd\u8a18\" class=\"fragment\"></span><a href=\"#%E3%81%95%E3%82%89%E3%81%AB%E8%BF%BD%E8%A8%98\"><i class=\"fa fa-link\"></i></a>\u3055\u3089\u306b\u8ffd\u8a18</h1>\n\n<p>\u95a2\u6570\u5f93\u5c5e\u3067\u5b9f\u88c5\u3057\u3066\u307f\u308b\u3068\u3001unsafeCoerce\u4e0d\u8981\u306b&amp;&amp;ghc-7.8\u4f9d\u5b58\u3092\u6d88\u305b\u305f\uff01<br>\n\u3084\u3063\u305f\u306d\uff01</p>\n\n<div class=\"code-frame\" data-lang=\"hs\"><div class=\"highlight\"><pre><span class=\"cp\">{-# LANGUAGE FunctionalDependencies #-}</span>\n<span class=\"cp\">{-# LANGUAGE DataKinds #-}</span>\n<span class=\"cp\">{-# LANGUAGE TypeOperators #-}</span>\n<span class=\"cp\">{-# LANGUAGE KindSignatures #-}</span>\n<span class=\"cp\">{-# LANGUAGE GADTs #-}</span>\n<span class=\"cp\">{-# LANGUAGE MultiParamTypeClasses #-}</span>\n<span class=\"cp\">{-# LANGUAGE FlexibleInstances #-}</span>\n<span class=\"cp\">{-# LANGUAGE OverlappingInstances #-}</span>\n<span class=\"cp\">{-# LANGUAGE UndecidableInstances #-}</span>\n<span class=\"cp\">{-# LANGUAGE PolyKinds #-}</span>\n<span class=\"cp\">{-# LANGUAGE CPP #-}</span>\n\n<span class=\"kr\">import</span> <span class=\"nn\">GHC.TypeLits</span><span class=\"p\">(</span><span class=\"kt\">Symbol</span><span class=\"p\">)</span>\n<span class=\"o\">#</span><span class=\"kr\">if</span> <span class=\"n\">__GLASGOW_HASKELL__</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">708</span>\n<span class=\"kr\">import</span> <span class=\"nn\">Data.Proxy</span>\n<span class=\"o\">#</span><span class=\"kr\">else</span>\n<span class=\"kr\">data</span> <span class=\"kt\">Proxy</span> <span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">k</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"kt\">Proxy</span>\n<span class=\"o\">#</span><span class=\"n\">endif</span>\n\n<span class=\"kr\">data</span> <span class=\"kt\">Dict</span> <span class=\"p\">(</span><span class=\"n\">ks</span> <span class=\"o\">::</span> <span class=\"p\">[(</span><span class=\"kt\">Symbol</span><span class=\"p\">,</span><span class=\"o\">*</span><span class=\"p\">)])</span> <span class=\"kr\">where</span>\n    <span class=\"kt\">Empty</span> <span class=\"o\">::</span> <span class=\"kt\">Dict</span> <span class=\"sc\">'[</span><span class=\"err\">]</span>\n    <span class=\"kt\">Ins</span>   <span class=\"o\">::</span> <span class=\"kt\">Elem</span> <span class=\"n\">k</span> <span class=\"n\">t</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">Dict</span> <span class=\"n\">ks</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">Dict</span> <span class=\"p\">(</span><span class=\"sc\">'(</span><span class=\"err\">k</span><span class=\"p\">,</span><span class=\"n\">t</span><span class=\"p\">)</span> <span class=\"sc\">':</span><span class=\"err\"> </span><span class=\"n\">ks</span><span class=\"p\">)</span>\n\n<span class=\"kr\">data</span> <span class=\"kt\">Elem</span> <span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"kt\">Symbol</span><span class=\"p\">)</span> <span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"kt\">Elem</span> <span class=\"n\">t</span>\n\n<span class=\"kr\">class</span> <span class=\"kt\">Member</span> <span class=\"p\">(</span><span class=\"n\">key</span> <span class=\"o\">::</span> <span class=\"kt\">Symbol</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">ks</span> <span class=\"o\">::</span> <span class=\"p\">[(</span><span class=\"kt\">Symbol</span><span class=\"p\">,</span><span class=\"o\">*</span><span class=\"p\">)])</span> <span class=\"n\">out</span> <span class=\"o\">|</span> <span class=\"n\">key</span> <span class=\"n\">ks</span> <span class=\"o\">-&gt;</span> <span class=\"n\">out</span> <span class=\"kr\">where</span>\n  <span class=\"n\">dLookup</span> <span class=\"o\">::</span> <span class=\"kt\">Proxy</span> <span class=\"n\">key</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">Dict</span> <span class=\"n\">ks</span> <span class=\"o\">-&gt;</span> <span class=\"n\">out</span>\n\n<span class=\"c1\">-- key\u304c\u30de\u30c3\u30c1\u3057\u305f\u3068\u304d</span>\n<span class=\"kr\">instance</span> <span class=\"kt\">Member</span> <span class=\"n\">key</span> <span class=\"p\">(</span><span class=\"sc\">'(</span><span class=\"err\">k</span><span class=\"n\">ey</span><span class=\"p\">,</span><span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"sc\">':</span><span class=\"err\"> </span><span class=\"n\">d</span><span class=\"p\">)</span> <span class=\"n\">v</span> <span class=\"kr\">where</span>\n    <span class=\"n\">dLookup</span> <span class=\"kr\">_</span> <span class=\"p\">(</span><span class=\"kt\">Elem</span> <span class=\"n\">v</span> <span class=\"p\">`</span><span class=\"kt\">Ins</span><span class=\"p\">`</span> <span class=\"kr\">_</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">v</span>\n\n<span class=\"c1\">-- \u30de\u30c3\u30c1\u3057\u306a\u3044\u3068\u304d</span>\n<span class=\"kr\">instance</span> <span class=\"kt\">Member</span> <span class=\"n\">key</span> <span class=\"n\">d</span> <span class=\"n\">out</span> <span class=\"o\">=&gt;</span> <span class=\"kt\">Member</span> <span class=\"n\">key</span> <span class=\"p\">(</span><span class=\"sc\">'(</span><span class=\"err\">k</span><span class=\"n\">ey'</span><span class=\"p\">,</span><span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"sc\">':</span><span class=\"err\"> </span><span class=\"n\">d</span><span class=\"p\">)</span> <span class=\"n\">out</span> <span class=\"kr\">where</span>\n    <span class=\"n\">dLookup</span> <span class=\"n\">p</span> <span class=\"p\">(</span><span class=\"kr\">_</span> <span class=\"p\">`</span><span class=\"kt\">Ins</span><span class=\"p\">`</span> <span class=\"n\">ks</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">dLookup</span> <span class=\"n\">p</span> <span class=\"n\">ks</span>\n\n<span class=\"n\">dict</span> <span class=\"o\">::</span> <span class=\"kt\">Dict</span> <span class=\"p\">[</span><span class=\"sc\">'(</span><span class=\"err\">\"</span><span class=\"n\">dog</span><span class=\"s\">\", String), '(\"</span><span class=\"n\">cat</span><span class=\"s\">\", Int)]\ndict = \n    Ins (Elem \"</span><span class=\"n\">bowwow</span><span class=\"s\">\" :: Elem \"</span><span class=\"n\">dog</span><span class=\"s\">\" String) $\n    Ins (Elem 222      :: Elem \"</span><span class=\"n\">cat</span><span class=\"s\">\" Int) $ \n    Empty\n</span></pre></div></div>\n\n<h1>\n<span id=\"\u66f4\u306b\u66f4\u306b\u8ffd\u8a1820141128\" class=\"fragment\"></span><a href=\"#%E6%9B%B4%E3%81%AB%E6%9B%B4%E3%81%AB%E8%BF%BD%E8%A8%9820141128\"><i class=\"fa fa-link\"></i></a>\u66f4\u306b\u66f4\u306b\u8ffd\u8a18(2014.11.28)</h1>\n\n<p>\u3053\u308c\u3067\u306flookup\u306b\u6700\u60aaO(n)\u304b\u304b\u3063\u3066\u3057\u307e\u3046\u306e\u3067\u5185\u90e8\u5b9f\u88c5\u306bHashMap\u3092\u4f7f\u7528\u3057\u3066\u9ad8\u901f\u5316\u3057\u307e\u3057\u3087\u3046</p>\n\n<div class=\"code-frame\" data-lang=\"haskell\">\n<div class=\"code-lang\"><span class=\"bold\">TypedHashMap.hs</span></div>\n<div class=\"highlight\"><pre><span class=\"cp\">{-# LANGUAGE CPP #-}</span>\n<span class=\"cp\">{-# LANGUAGE ConstraintKinds #-}</span> <span class=\"c1\">-- for ghc-7.6</span>\n<span class=\"cp\">{-# LANGUAGE FlexibleContexts #-}</span> <span class=\"c1\">-- for ghc-7.6</span>\n<span class=\"cp\">{-# LANGUAGE ScopedTypeVariables #-}</span> <span class=\"c1\">-- for ghc-7.6</span>\n<span class=\"cp\">{-# LANGUAGE OverlappingInstances #-}</span>\n<span class=\"cp\">{-# LANGUAGE NoMonomorphismRestriction #-}</span>\n<span class=\"cp\">{-# LANGUAGE UndecidableInstances #-}</span>\n<span class=\"cp\">{-# LANGUAGE TypeOperators #-}</span>\n<span class=\"cp\">{-# LANGUAGE FlexibleInstances #-}</span>\n<span class=\"cp\">{-# LANGUAGE MultiParamTypeClasses #-}</span>\n<span class=\"cp\">{-# LANGUAGE FunctionalDependencies #-}</span>\n<span class=\"cp\">{-# LANGUAGE ExistentialQuantification #-}</span>\n<span class=\"cp\">{-# LANGUAGE DataKinds #-}</span>\n<span class=\"cp\">{-# LANGUAGE KindSignatures #-}</span>\n\n<span class=\"kr\">import</span> <span class=\"nn\">GHC.TypeLits</span>\n<span class=\"kr\">import</span> <span class=\"nn\">GHC.Prim</span><span class=\"p\">(</span><span class=\"kt\">Any</span><span class=\"p\">)</span>\n<span class=\"kr\">import</span> <span class=\"k\">qualified</span> <span class=\"nn\">Data.HashMap.Strict</span> <span class=\"k\">as</span> <span class=\"n\">H</span>\n<span class=\"kr\">import</span> <span class=\"k\">qualified</span> <span class=\"nn\">Data.Text</span> <span class=\"k\">as</span> <span class=\"n\">T</span>\n<span class=\"kr\">import</span> <span class=\"nn\">Unsafe.Coerce</span>\n\n<span class=\"kr\">data</span> <span class=\"kt\">SProxy</span> <span class=\"p\">(</span><span class=\"n\">s</span> <span class=\"o\">::</span> <span class=\"kt\">Symbol</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"kt\">SProxy</span>\n\n<span class=\"c1\">-- ghc-7.6\u3068ghc-7.8\u3067\u5171\u901a\u306bsymbolVal\u3092\u4f7f\u7528\u3059\u308b\u305f\u3081\u306ehack</span>\n<span class=\"o\">#</span><span class=\"kr\">if</span> <span class=\"n\">__GLASGOW_HASKELL__</span> <span class=\"o\">&lt;</span> <span class=\"mi\">707</span>\n<span class=\"kr\">type</span> <span class=\"kt\">KnownSymbol</span> <span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">::</span> <span class=\"kt\">Symbol</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"kt\">SingRep</span> <span class=\"n\">n</span> <span class=\"kt\">String</span>\n\n<span class=\"n\">symbolVal</span> <span class=\"o\">::</span> <span class=\"n\">forall</span> <span class=\"n\">n</span> <span class=\"n\">proxy</span><span class=\"o\">.</span> <span class=\"kt\">KnownSymbol</span> <span class=\"n\">n</span> <span class=\"o\">=&gt;</span> <span class=\"n\">proxy</span> <span class=\"n\">n</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">String</span>\n<span class=\"n\">symbolVal</span> <span class=\"kr\">_</span> <span class=\"o\">=</span> <span class=\"n\">fromSing</span> <span class=\"p\">(</span><span class=\"n\">sing</span> <span class=\"o\">::</span> <span class=\"kt\">Sing</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n<span class=\"cp\">{-# INLINE symbolVal #-}</span>\n<span class=\"o\">#</span><span class=\"n\">endif</span>\n\n<span class=\"c1\">-- kind\u7528\u306e\u30c7\u30fc\u30bf\u578b\u3092\u7528\u610f\u3059\u308b\u3068\u5c11\u3057\u30ab\u30c3\u30b3\u826f\u304f\u66f8\u3051\u308b\u304b\u3082\u3002</span>\n<span class=\"kr\">data</span> <span class=\"kt\">Elem</span> <span class=\"o\">=</span> <span class=\"n\">forall</span> <span class=\"n\">v</span><span class=\"o\">.</span> <span class=\"kt\">Symbol</span> <span class=\"o\">:=</span> <span class=\"n\">v</span>\n\n<span class=\"c1\">-- HashMap\u306ekey\u306b\u306fString\u3067\u306a\u304fText\u3092\u4f7f\u7528\u3002\u30b3\u30fc\u30c9\u898b\u308b\u9650\u308a\u3067\u306fText\u306e\u304c\u901f\u305d\u3046(\u8981\u691c\u8a3c</span>\n<span class=\"c1\">-- HashMap\u306e\u5024\u306f\u5358\u76f8\u306a\u306e\u3067Any\u306b\u30ad\u30e3\u30b9\u30c8\u3057\u3066\u5165\u308c\u308b\u3002</span>\n<span class=\"c1\">-- Any\u306fGHC.Dynamics\u3067\u3082\u4f7f\u7528\u3057\u3066\u3044\u308b\u306e\u3067\u53c2\u8003\u306b\u306a\u308b\u304b\u3082</span>\n<span class=\"kr\">newtype</span> <span class=\"kt\">Dict</span> <span class=\"p\">(</span><span class=\"n\">ks</span> <span class=\"o\">::</span> <span class=\"p\">[</span><span class=\"kt\">Elem</span><span class=\"p\">])</span> <span class=\"o\">=</span> <span class=\"kt\">Dict</span> <span class=\"p\">(</span><span class=\"kt\">H</span><span class=\"o\">.</span><span class=\"kt\">HashMap</span> <span class=\"kt\">T</span><span class=\"o\">.</span><span class=\"kt\">Text</span> <span class=\"kt\">Any</span><span class=\"p\">)</span>\n\n<span class=\"c1\">-- \u666e\u901a\u306blookup\u3059\u308b\u95a2\u6570\u3092\u5b9a\u7fa9\u3002\u3053\u308c\u3067\u306f\u578b\u304c\u7de9\u3044\u306e\u3067\u4f55\u3082\u4fdd\u8a3c\u3057\u3066\u304f\u308c\u306a\u3044\u3002</span>\n<span class=\"n\">unsafeDLookup</span> <span class=\"o\">::</span> <span class=\"kt\">KnownSymbol</span> <span class=\"n\">k</span> <span class=\"o\">=&gt;</span> <span class=\"n\">proxy</span> <span class=\"n\">k</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">Dict</span> <span class=\"n\">any</span> <span class=\"o\">-&gt;</span> <span class=\"n\">out</span>\n<span class=\"n\">unsafeDLookup</span> <span class=\"n\">p</span> <span class=\"p\">(</span><span class=\"kt\">Dict</span> <span class=\"n\">d</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">maybe</span> <span class=\"n\">undefined</span> <span class=\"n\">unsafeCoerce</span> <span class=\"o\">$</span> <span class=\"kt\">H</span><span class=\"o\">.</span><span class=\"n\">lookup</span> <span class=\"p\">(</span><span class=\"kt\">T</span><span class=\"o\">.</span><span class=\"n\">pack</span> <span class=\"o\">$</span> <span class=\"n\">symbolVal</span> <span class=\"n\">p</span><span class=\"p\">)</span> <span class=\"n\">d</span>\n\n<span class=\"c1\">-- \u578b\u30af\u30e9\u30b9\u306b\u3088\u3063\u3066\u30ad\u30fc\u306e\u5b58\u5728\u3001\u5bfe\u5fdc\u3059\u308b\u5024\u306e\u578b\u3092\u4fdd\u8a3c</span>\n<span class=\"kr\">class</span> <span class=\"kt\">Member</span> <span class=\"p\">(</span><span class=\"n\">key</span> <span class=\"o\">::</span> <span class=\"kt\">Symbol</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">kvs</span> <span class=\"o\">::</span> <span class=\"p\">[</span><span class=\"kt\">Elem</span><span class=\"p\">])</span> <span class=\"p\">(</span><span class=\"n\">out</span> <span class=\"o\">::</span> <span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"o\">|</span> <span class=\"n\">key</span> <span class=\"n\">kvs</span> <span class=\"o\">-&gt;</span> <span class=\"n\">out</span> <span class=\"kr\">where</span>\n    <span class=\"n\">dLookup</span> <span class=\"o\">::</span> <span class=\"n\">proxy</span> <span class=\"n\">key</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">Dict</span> <span class=\"n\">kvs</span> <span class=\"o\">-&gt;</span> <span class=\"n\">out</span>\n\n<span class=\"kr\">instance</span> <span class=\"kt\">KnownSymbol</span> <span class=\"n\">key</span> <span class=\"o\">=&gt;</span> <span class=\"kt\">Member</span> <span class=\"n\">key</span> <span class=\"p\">(</span><span class=\"n\">key</span> <span class=\"o\">:=</span> <span class=\"n\">v</span> <span class=\"sc\">':</span><span class=\"err\"> </span><span class=\"n\">d</span><span class=\"p\">)</span> <span class=\"n\">v</span> <span class=\"kr\">where</span>\n    <span class=\"n\">dLookup</span> <span class=\"o\">=</span> <span class=\"n\">unsafeDLookup</span>\n\n<span class=\"kr\">instance</span> <span class=\"p\">(</span><span class=\"kt\">KnownSymbol</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"kt\">Member</span> <span class=\"n\">key</span> <span class=\"n\">d</span> <span class=\"n\">out</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"kt\">Member</span> <span class=\"n\">key</span> <span class=\"p\">(</span><span class=\"n\">key'</span> <span class=\"o\">:=</span> <span class=\"n\">v</span> <span class=\"sc\">':</span><span class=\"err\"> </span><span class=\"n\">d</span><span class=\"p\">)</span> <span class=\"n\">out</span> <span class=\"kr\">where</span>\n    <span class=\"n\">dLookup</span> <span class=\"o\">=</span> <span class=\"n\">unsafeDLookup</span>\n\n<span class=\"n\">empty</span> <span class=\"o\">::</span> <span class=\"kt\">Dict</span> <span class=\"sc\">'[</span><span class=\"err\">]</span>\n<span class=\"n\">empty</span> <span class=\"o\">=</span> <span class=\"kt\">Dict</span> <span class=\"kt\">H</span><span class=\"o\">.</span><span class=\"n\">empty</span>\n\n<span class=\"c1\">-- \u660e\u793a\u7684\u306b\u578b\u30b7\u30b0\u30cb\u30c1\u30e3\u3092\u66f8\u3044\u3066insert\u3057\u305f\u578b\u3092\u8a18\u9332\u3055\u305b\u308b</span>\n<span class=\"n\">insert</span> <span class=\"o\">::</span> <span class=\"kt\">KnownSymbol</span> <span class=\"n\">k</span> <span class=\"o\">=&gt;</span> <span class=\"n\">proxy</span> <span class=\"n\">k</span> <span class=\"o\">-&gt;</span> <span class=\"n\">v</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">Dict</span> <span class=\"n\">i</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">Dict</span> <span class=\"p\">(</span><span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"n\">v</span> <span class=\"sc\">':</span><span class=\"err\"> </span><span class=\"n\">i</span><span class=\"p\">)</span>\n<span class=\"n\">insert</span> <span class=\"n\">p</span> <span class=\"n\">v</span> <span class=\"p\">(</span><span class=\"kt\">Dict</span> <span class=\"n\">d</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"kt\">Dict</span> <span class=\"o\">$</span> <span class=\"kt\">H</span><span class=\"o\">.</span><span class=\"n\">insert</span> <span class=\"p\">(</span><span class=\"kt\">T</span><span class=\"o\">.</span><span class=\"n\">pack</span> <span class=\"o\">$</span> <span class=\"n\">symbolVal</span> <span class=\"n\">p</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">unsafeCoerce</span> <span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"n\">d</span>\n\n<span class=\"c1\">-- \u3053\u308c\u3067\u3001dict\u306f\u578b\u30b7\u30b0\u30cb\u30c1\u30e3\u3092\u66f8\u304b\u306a\u304f\u3066\u3082\u3061\u3083\u3093\u3068\u4ee5\u4e0b\u306e\u578b\u304c\u63a8\u8ad6\u3055\u308c\u308b\u3002</span>\n<span class=\"c1\">-- dict :: Num v =&gt; Dict '[\"dog\" := [Char], \"cat\" := v]</span>\n<span class=\"n\">dict</span> <span class=\"o\">=</span> \n    <span class=\"n\">insert</span> <span class=\"p\">(</span><span class=\"kt\">SProxy</span> <span class=\"o\">::</span> <span class=\"kt\">SProxy</span> <span class=\"s\">\"dog\"</span><span class=\"p\">)</span> <span class=\"s\">\"bowwow\"</span> <span class=\"o\">$</span>\n    <span class=\"n\">insert</span> <span class=\"p\">(</span><span class=\"kt\">SProxy</span> <span class=\"o\">::</span> <span class=\"kt\">SProxy</span> <span class=\"s\">\"cat\"</span><span class=\"p\">)</span> <span class=\"mi\">222</span> <span class=\"o\">$</span>\n    <span class=\"n\">empty</span>\n</pre></div>\n</div>\n\n<p>\u3055\u3042\u3001ghci\u306b\u8aad\u307f\u3053\u3093\u3067\u8a66\u3057\u3066\u307f\u307e\u3057\u3087\u3046</p>\n\n<div class=\"code-frame\" data-lang=\"hs\"><div class=\"highlight\"><pre><span class=\"o\">$</span> <span class=\"n\">ghci</span> <span class=\"o\">-</span><span class=\"kt\">XDataKinds</span> <span class=\"kt\">TypedHashMap</span><span class=\"o\">.</span><span class=\"n\">hs</span>\n<span class=\"n\">ghci</span><span class=\"o\">&gt;</span> <span class=\"n\">dLookup</span> <span class=\"p\">(</span><span class=\"kt\">SProxy</span> <span class=\"o\">::</span> <span class=\"kt\">SProxy</span> <span class=\"s\">\"cat\"</span><span class=\"p\">)</span> <span class=\"n\">dict</span>\n<span class=\"mi\">222</span>\n<span class=\"n\">ghci</span><span class=\"o\">&gt;</span> <span class=\"o\">:</span><span class=\"n\">t</span> <span class=\"n\">dLookup</span> <span class=\"p\">(</span><span class=\"kt\">SProxy</span> <span class=\"o\">::</span> <span class=\"kt\">SProxy</span> <span class=\"s\">\"cat\"</span><span class=\"p\">)</span> <span class=\"n\">dict</span>\n<span class=\"n\">dLookup</span> <span class=\"p\">(</span><span class=\"kt\">SProxy</span> <span class=\"o\">::</span> <span class=\"kt\">SProxy</span> <span class=\"s\">\"cat\"</span><span class=\"p\">)</span> <span class=\"n\">dict</span> <span class=\"o\">::</span> <span class=\"kt\">Num</span> <span class=\"n\">v</span> <span class=\"o\">=&gt;</span> <span class=\"n\">v</span>\n\n<span class=\"n\">ghci</span><span class=\"o\">&gt;</span> <span class=\"n\">dLookup</span> <span class=\"p\">(</span><span class=\"kt\">SProxy</span> <span class=\"o\">::</span> <span class=\"kt\">SProxy</span> <span class=\"s\">\"dog\"</span><span class=\"p\">)</span> <span class=\"n\">dict</span>\n<span class=\"s\">\"bowwow\"</span>\n\n<span class=\"n\">ghci</span><span class=\"o\">&gt;</span> <span class=\"n\">dLookup</span> <span class=\"p\">(</span><span class=\"kt\">SProxy</span> <span class=\"o\">::</span> <span class=\"kt\">SProxy</span> <span class=\"s\">\"unk\"</span><span class=\"p\">)</span> <span class=\"n\">dict</span>\n\n<span class=\"o\">&lt;</span><span class=\"n\">interactive</span><span class=\"o\">&gt;:</span><span class=\"mi\">7</span><span class=\"o\">:</span><span class=\"mi\">1</span><span class=\"o\">:</span>\n    <span class=\"kt\">No</span> <span class=\"kr\">instance</span> <span class=\"n\">for</span> <span class=\"p\">(</span><span class=\"kt\">Member</span> <span class=\"s\">\"unk\"</span> <span class=\"sc\">'[</span><span class=\"err\">]</span> <span class=\"n\">a0</span><span class=\"p\">)</span> <span class=\"n\">arising</span> <span class=\"n\">from</span> <span class=\"n\">a</span> <span class=\"n\">use</span> <span class=\"kr\">of</span> <span class=\"err\">\u2018</span><span class=\"n\">it</span><span class=\"err\">\u2019</span>\n    <span class=\"kt\">In</span> <span class=\"n\">the</span> <span class=\"n\">first</span> <span class=\"n\">argument</span> <span class=\"kr\">of</span> <span class=\"err\">\u2018</span><span class=\"n\">print</span><span class=\"err\">\u2019</span><span class=\"p\">,</span> <span class=\"n\">namely</span> <span class=\"err\">\u2018</span><span class=\"n\">it</span><span class=\"err\">\u2019</span>\n    <span class=\"kt\">In</span> <span class=\"n\">a</span> <span class=\"n\">stmt</span> <span class=\"kr\">of</span> <span class=\"n\">an</span> <span class=\"n\">interactive</span> <span class=\"kt\">GHCi</span> <span class=\"n\">command</span><span class=\"o\">:</span> <span class=\"n\">print</span> <span class=\"n\">it</span>\n</pre></div></div>\n\n<p>\u3053\u308c\u3067\u5b89\u5168\u6027\u3068\u52b9\u7387\u306e\u4e21\u65b9\u3092\u5f97\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3057\u305f\uff01</p>\n\n<p>\u304b\u305f\u306e\u3061\u304b\u3089\u3063\u3066\u3059\u3052\u30fc</p>\n", "body": "\n\u3084\u308a\u305f\u3044\u3053\u3068\n===\n\u8f9e\u66f8\u5185\u306b\u5f53\u8a72\u306e\u30ad\u30fc\u304c\u3042\u308b\u5834\u5408\u306e\u307f\u30b3\u30f3\u30d1\u30a4\u30eb\u3092\u901a\u904e\u3059\u308blookup\n\n```haskell:\u64ec\u4f3c\u30b3\u30fc\u30c9\ndict = (Elem 222 :: Elem \"cat\" Int)\n\t`Ins` (Elem \"bowwow\" :: Elem \"dog\" String)\n\t`Ins` Emty\n\n-- dlookup (Proxy :: Proxy \"dog\") dict == \"bowwow\"\n-- dlookup (Proxy :: Proxy \"cat\") dict == 222\n-- dlookup (Proxy :: Proxy \"xxx\") dict -- \u578b\u30a8\u30e9\u30fc\n```\n\n\u30b3\u30fc\u30c9\n===\nghc-7.8\u4ee5\u964d\u5fc5\u9808\n\ngist: https://gist.github.com/philopon/a66d5814f1eef470aeef\n\n```haskell\n{-# LANGUAGE DataKinds #-}\n{-# LANGUAGE PolyKinds #-}\n{-# LANGUAGE KindSignatures #-}\n{-# LANGUAGE TypeOperators #-}\n{-# LANGUAGE GADTs #-}\n{-# LANGUAGE TypeFamilies #-}\n{-# LANGUAGE UndecidableInstances #-}\n{-# LANGUAGE ScopedTypeVariables #-}\n\nimport GHC.TypeLits\nimport Data.Proxy\nimport Data.Type.Equality\nimport Unsafe.Coerce\n\ndata Dict (ks :: [(Symbol,*)]) where\n    Empty :: Dict '[]\n    Ins   :: KnownSymbol k => Elem k t -> Dict ks -> Dict ('(k,t) ': ks)\n\ndata Elem (a :: Symbol) t = Elem t\n\ntype family Or (a :: Bool) (b :: Bool) :: Bool where\n    Or False False = False\n    Or a     b     = True\n\ntype family Fst (a :: (k, l)) :: k\ntype instance Fst '(k, l) = k\n\ntype family HasKey (k :: Symbol) (ks :: [(Symbol, *)]) :: Bool\ntype instance HasKey k '[] = 'False\ntype instance HasKey k (e ': ks) = Or (k == Fst e) (HasKey k ks)\n\ntype family If (b :: Bool) (t :: k) (f :: k) :: k\ntype instance If 'True  t f = t\ntype instance If 'False t f = f\n\ntype family Value (k :: Symbol) (ks :: [(Symbol, *)]) :: *\ntype instance Value k ('(l, v) ': ks) = If (k == l) v (Value k ks)\n\ndata W = forall a. W a\n\nsdictToDict :: Dict ks -> [(String, W)]\nsdictToDict Empty = []\nsdictToDict ((Elem v :: Elem k v) `Ins` l) = (symbolVal (Proxy :: Proxy k), W v) : sdictToDict l\n\ndLookup :: forall k ks. (HasKey k ks ~ True, KnownSymbol k)\n        => Proxy (k :: Symbol) -> Dict ks -> Value k ks\ndLookup _ d = case maybe undefined id . lookup (symbolVal (Proxy :: Proxy k)) $ sdictToDict d of\n    W a -> unsafeCoerce a\n\ndict :: Dict ['(\"dog\", String), '(\"cat\", Int)]\ndict = \n    Ins (Elem \"bowwow\" :: Elem \"dog\" String) $\n    Ins (Elem 222      :: Elem \"cat\" Int) $ \n    Empty\n```\n\n```haskell:ghci\n> :set -XDataKinds\n> dLookup (Proxy :: Proxy \"dog\") dict\n\"bowwow\" -- String\n> dLookup (Proxy :: Proxy \"cat\") dict\n222\n> dLookup (Proxy :: Proxy \"xxx\") dict\n\n<interactive>:10:1:\n    Couldn't match type \u2018'False\u2019 with \u2018'True\u2019\n    Expected type: 'True\n      Actual type: HasKey \"xxx\" '['(\"dog\", String), '(\"cat\", Int)]\n    In the expression: dLookup (Proxy :: Proxy \"xxx\") dict\n    In an equation for \u2018it\u2019: it = dLookup (Proxy :: Proxy \"xxx\") dict\n```\n\n\u6240\u611f\n===\n* \u4e00\u5fdc\u52d5\u3044\u3066\u308b\u3063\u307d\u3044\u304c\u2026\u2026\n* \u3053\u308c\u3067\u3044\u3044\u306e\u304b\n* \u3082\u3063\u3068\u7dba\u9e97\u306b\u66f8\u304d\u305f\u3044\n\n\u8ffd\u8a18\n===\n\u578b\u30af\u30e9\u30b9\u3067\u3082\u3063\u3068\u30b7\u30f3\u30d7\u30eb\u306b\u66f8\u3051\u305f\u3002\nMember\u306fextensible-effects\u306e\u307b\u307c\u4e38\u5199\u3057\u3002\n\nghc-7.8\u4ee5\u964d\u5fc5\u9808\n\n```haskell\n{-# LANGUAGE DataKinds #-}\n{-# LANGUAGE TypeOperators #-}\n{-# LANGUAGE GADTs #-}\n{-# LANGUAGE TypeFamilies #-}\n{-# LANGUAGE MultiParamTypeClasses #-}\n{-# LANGUAGE FlexibleInstances #-}\n{-# LANGUAGE OverlappingInstances #-}\n\nimport GHC.TypeLits\nimport Data.Proxy\nimport Unsafe.Coerce\n\ndata Dict (ks :: [(Symbol,*)]) where\n    Empty :: Dict '[]\n    Ins   :: KnownSymbol k => Elem k t -> Dict ks -> Dict ('(k,t) ': ks)\n\ndata Elem (a :: Symbol) t = Elem t\n\ntype family Lookup (key :: Symbol) (ks :: [(Symbol,*)]) where\n  Lookup key ('(key, v) ': ks) = v\n  Lookup key ('(k, v) ': ks) = Lookup key ks\n\nclass Member (key :: Symbol) (ks :: [(Symbol,*)]) where\n  dLookup :: Proxy key -> Dict ks -> Lookup key ks\n\n-- key\u304c\u30de\u30c3\u30c1\u3057\u305f\u3068\u304d\ninstance Member key ('(key,v) ': d) where\n    dLookup _ (Elem v `Ins` _) = v\n\n-- \u30de\u30c3\u30c1\u3057\u306a\u3044\u3068\u304d\ninstance Member key d => Member key ('(key',v) ': d) where\n    dLookup p (_ `Ins` ks) = unsafeCoerce $ dLookup p ks\n\ndict :: Dict ['(\"dog\", String), '(\"cat\", Int)]\ndict = \n    Ins (Elem \"bowwow\" :: Elem \"dog\" String) $\n    Ins (Elem 222      :: Elem \"cat\" Int) $ \n    Empty\n```\n\n```haskell:ghci\n> dLookup  (Proxy :: Proxy \"dog\") dict\n\"bowwow\"\n> dLookup  (Proxy :: Proxy \"cat\") dict\n222\n> dLookup  (Proxy :: Proxy \"c\") dict\n\n<interactive>:31:1:\n    No instance for (Member \"c\" '[]) arising from a use of \u2018dLookup\u2019\n    In the expression: dLookup (Proxy :: Proxy \"c\") dict\n    In an equation for \u2018it\u2019: it = dLookup (Proxy :: Proxy \"c\") dict\n```\n\n\u6240\u611f2\n===\n* \u578b\u30af\u30e9\u30b9\u3068\u578b\u65cf\u306e\u4f7f\u3044\u5206\u3051\u304c\u30a4\u30de\u30a4\u30c1\u3064\u304b\u3081\u306a\u3044\u611f\u3058\u3002\n* Any\u306a\u5236\u7d04\u3092\u66f8\u304f\u5fc5\u8981\u304c\u6709\u308b\u5834\u5408\u306f\u578b\u30af\u30e9\u30b9\u306e\u304c\u826f\u3044\u3063\u307d\u3044\uff1f\n* (\u305f\u3076\u3093)\u578b\u304c\u5408\u308f\u306a\u3044\u306e\u3067unsafeCoerce\u4f7f\u3063\u305f\u3051\u3069\u3001\u3082\u3057\u304b\u3057\u305f\u3089\u5408\u3046\u306e\u304b\u3082\uff1f\n\n\u3055\u3089\u306b\u8ffd\u8a18\n===\n\u95a2\u6570\u5f93\u5c5e\u3067\u5b9f\u88c5\u3057\u3066\u307f\u308b\u3068\u3001unsafeCoerce\u4e0d\u8981\u306b&&ghc-7.8\u4f9d\u5b58\u3092\u6d88\u305b\u305f\uff01\n\u3084\u3063\u305f\u306d\uff01\n\n```hs\n{-# LANGUAGE FunctionalDependencies #-}\n{-# LANGUAGE DataKinds #-}\n{-# LANGUAGE TypeOperators #-}\n{-# LANGUAGE KindSignatures #-}\n{-# LANGUAGE GADTs #-}\n{-# LANGUAGE MultiParamTypeClasses #-}\n{-# LANGUAGE FlexibleInstances #-}\n{-# LANGUAGE OverlappingInstances #-}\n{-# LANGUAGE UndecidableInstances #-}\n{-# LANGUAGE PolyKinds #-}\n{-# LANGUAGE CPP #-}\n\nimport GHC.TypeLits(Symbol)\n#if __GLASGOW_HASKELL__ >= 708\nimport Data.Proxy\n#else\ndata Proxy (a :: k) = Proxy\n#endif\n\ndata Dict (ks :: [(Symbol,*)]) where\n    Empty :: Dict '[]\n    Ins   :: Elem k t -> Dict ks -> Dict ('(k,t) ': ks)\n\ndata Elem (a :: Symbol) t = Elem t\n\nclass Member (key :: Symbol) (ks :: [(Symbol,*)]) out | key ks -> out where\n  dLookup :: Proxy key -> Dict ks -> out\n\n-- key\u304c\u30de\u30c3\u30c1\u3057\u305f\u3068\u304d\ninstance Member key ('(key,v) ': d) v where\n    dLookup _ (Elem v `Ins` _) = v\n\n-- \u30de\u30c3\u30c1\u3057\u306a\u3044\u3068\u304d\ninstance Member key d out => Member key ('(key',v) ': d) out where\n    dLookup p (_ `Ins` ks) = dLookup p ks\n\ndict :: Dict ['(\"dog\", String), '(\"cat\", Int)]\ndict = \n    Ins (Elem \"bowwow\" :: Elem \"dog\" String) $\n    Ins (Elem 222      :: Elem \"cat\" Int) $ \n    Empty\n```\n\n\u66f4\u306b\u66f4\u306b\u8ffd\u8a18(2014.11.28)\n===\n\n\u3053\u308c\u3067\u306flookup\u306b\u6700\u60aaO(n)\u304b\u304b\u3063\u3066\u3057\u307e\u3046\u306e\u3067\u5185\u90e8\u5b9f\u88c5\u306bHashMap\u3092\u4f7f\u7528\u3057\u3066\u9ad8\u901f\u5316\u3057\u307e\u3057\u3087\u3046\n\n```TypedHashMap.hs\n{-# LANGUAGE CPP #-}\n{-# LANGUAGE ConstraintKinds #-} -- for ghc-7.6\n{-# LANGUAGE FlexibleContexts #-} -- for ghc-7.6\n{-# LANGUAGE ScopedTypeVariables #-} -- for ghc-7.6\n{-# LANGUAGE OverlappingInstances #-}\n{-# LANGUAGE NoMonomorphismRestriction #-}\n{-# LANGUAGE UndecidableInstances #-}\n{-# LANGUAGE TypeOperators #-}\n{-# LANGUAGE FlexibleInstances #-}\n{-# LANGUAGE MultiParamTypeClasses #-}\n{-# LANGUAGE FunctionalDependencies #-}\n{-# LANGUAGE ExistentialQuantification #-}\n{-# LANGUAGE DataKinds #-}\n{-# LANGUAGE KindSignatures #-}\n\nimport GHC.TypeLits\nimport GHC.Prim(Any)\nimport qualified Data.HashMap.Strict as H\nimport qualified Data.Text as T\nimport Unsafe.Coerce\n\ndata SProxy (s :: Symbol) = SProxy\n\n-- ghc-7.6\u3068ghc-7.8\u3067\u5171\u901a\u306bsymbolVal\u3092\u4f7f\u7528\u3059\u308b\u305f\u3081\u306ehack\n#if __GLASGOW_HASKELL__ < 707\ntype KnownSymbol (n :: Symbol) = SingRep n String\n\nsymbolVal :: forall n proxy. KnownSymbol n => proxy n -> String\nsymbolVal _ = fromSing (sing :: Sing n)\n{-# INLINE symbolVal #-}\n#endif\n\n-- kind\u7528\u306e\u30c7\u30fc\u30bf\u578b\u3092\u7528\u610f\u3059\u308b\u3068\u5c11\u3057\u30ab\u30c3\u30b3\u826f\u304f\u66f8\u3051\u308b\u304b\u3082\u3002\ndata Elem = forall v. Symbol := v\n\n-- HashMap\u306ekey\u306b\u306fString\u3067\u306a\u304fText\u3092\u4f7f\u7528\u3002\u30b3\u30fc\u30c9\u898b\u308b\u9650\u308a\u3067\u306fText\u306e\u304c\u901f\u305d\u3046(\u8981\u691c\u8a3c\n-- HashMap\u306e\u5024\u306f\u5358\u76f8\u306a\u306e\u3067Any\u306b\u30ad\u30e3\u30b9\u30c8\u3057\u3066\u5165\u308c\u308b\u3002\n-- Any\u306fGHC.Dynamics\u3067\u3082\u4f7f\u7528\u3057\u3066\u3044\u308b\u306e\u3067\u53c2\u8003\u306b\u306a\u308b\u304b\u3082\nnewtype Dict (ks :: [Elem]) = Dict (H.HashMap T.Text Any)\n\n-- \u666e\u901a\u306blookup\u3059\u308b\u95a2\u6570\u3092\u5b9a\u7fa9\u3002\u3053\u308c\u3067\u306f\u578b\u304c\u7de9\u3044\u306e\u3067\u4f55\u3082\u4fdd\u8a3c\u3057\u3066\u304f\u308c\u306a\u3044\u3002\nunsafeDLookup :: KnownSymbol k => proxy k -> Dict any -> out\nunsafeDLookup p (Dict d) = maybe undefined unsafeCoerce $ H.lookup (T.pack $ symbolVal p) d\n\n-- \u578b\u30af\u30e9\u30b9\u306b\u3088\u3063\u3066\u30ad\u30fc\u306e\u5b58\u5728\u3001\u5bfe\u5fdc\u3059\u308b\u5024\u306e\u578b\u3092\u4fdd\u8a3c\nclass Member (key :: Symbol) (kvs :: [Elem]) (out :: *) | key kvs -> out where\n    dLookup :: proxy key -> Dict kvs -> out\n\ninstance KnownSymbol key => Member key (key := v ': d) v where\n    dLookup = unsafeDLookup\n\ninstance (KnownSymbol key, Member key d out) => Member key (key' := v ': d) out where\n    dLookup = unsafeDLookup\n\nempty :: Dict '[]\nempty = Dict H.empty\n\n-- \u660e\u793a\u7684\u306b\u578b\u30b7\u30b0\u30cb\u30c1\u30e3\u3092\u66f8\u3044\u3066insert\u3057\u305f\u578b\u3092\u8a18\u9332\u3055\u305b\u308b\ninsert :: KnownSymbol k => proxy k -> v -> Dict i -> Dict (k := v ': i)\ninsert p v (Dict d) = Dict $ H.insert (T.pack $ symbolVal p) (unsafeCoerce v) d\n\n-- \u3053\u308c\u3067\u3001dict\u306f\u578b\u30b7\u30b0\u30cb\u30c1\u30e3\u3092\u66f8\u304b\u306a\u304f\u3066\u3082\u3061\u3083\u3093\u3068\u4ee5\u4e0b\u306e\u578b\u304c\u63a8\u8ad6\u3055\u308c\u308b\u3002\n-- dict :: Num v => Dict '[\"dog\" := [Char], \"cat\" := v]\ndict = \n    insert (SProxy :: SProxy \"dog\") \"bowwow\" $\n    insert (SProxy :: SProxy \"cat\") 222 $\n    empty\n```\n\n\u3055\u3042\u3001ghci\u306b\u8aad\u307f\u3053\u3093\u3067\u8a66\u3057\u3066\u307f\u307e\u3057\u3087\u3046\n\n```.hs\n$ ghci -XDataKinds TypedHashMap.hs\nghci> dLookup (SProxy :: SProxy \"cat\") dict\n222\nghci> :t dLookup (SProxy :: SProxy \"cat\") dict\ndLookup (SProxy :: SProxy \"cat\") dict :: Num v => v\n\nghci> dLookup (SProxy :: SProxy \"dog\") dict\n\"bowwow\"\n\nghci> dLookup (SProxy :: SProxy \"unk\") dict\n\n<interactive>:7:1:\n    No instance for (Member \"unk\" '[] a0) arising from a use of \u2018it\u2019\n    In the first argument of \u2018print\u2019, namely \u2018it\u2019\n    In a stmt of an interactive GHCi command: print it\n```\n\n\u3053\u308c\u3067\u5b89\u5168\u6027\u3068\u52b9\u7387\u306e\u4e21\u65b9\u3092\u5f97\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3057\u305f\uff01\n\n\u304b\u305f\u306e\u3061\u304b\u3089\u3063\u3066\u3059\u3052\u30fc\n", "coediting": false, "comments_count": 0, "created_at": "2014-05-23T18:32:07+09:00", "group": null, "id": "3109bb1ae8d1b0081629", "likes_count": 7, "private": false, "reactions_count": 0, "tags": [{"name": "Haskell", "versions": []}, {"name": "ghc", "versions": ["7.6.3", "7.8.2"]}], "title": "\u578b\u5b89\u5168\u306alookup", "updated_at": "2014-11-28T06:00:20+09:00", "url": "https://qiita.com/philopon/items/3109bb1ae8d1b0081629", "user": {"description": "", "facebook_id": "", "followees_count": 4, "followers_count": 48, "github_login_name": null, "id": "philopon", "items_count": 18, "linkedin_id": "", "location": "", "name": "", "organization": "", "permanent_id": 33562, "profile_image_url": "https://qiita-image-store.s3.amazonaws.com/0/33562/profile-images/1473686152", "team_only": false, "twitter_screen_name": null, "website_url": "http://philopon.github.io"}, "page_views_count": null}